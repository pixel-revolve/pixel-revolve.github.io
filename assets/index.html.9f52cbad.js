import{_ as n,c as s}from"./app.9fd9aa02.js";const a={},p=s(`<h1 id="\u7B80\u5355\u4ECB\u7ECD" tabindex="-1"><a class="header-anchor" href="#\u7B80\u5355\u4ECB\u7ECD" aria-hidden="true">#</a> \u7B80\u5355\u4ECB\u7ECD</h1><h2 id="\u5E76\u53D1\u5B89\u5168\u7684\u96C6\u5408" tabindex="-1"><a class="header-anchor" href="#\u5E76\u53D1\u5B89\u5168\u7684\u96C6\u5408" aria-hidden="true">#</a> \u5E76\u53D1\u5B89\u5168\u7684\u96C6\u5408\uFF1F</h2><blockquote><p>\u5E76\u53D1\u4E0D\u5B89\u5168\u7684\u96C6\u5408</p></blockquote><p>\u5728 Java \u4E2D\uFF0C\u6709\u4E00\u4E9B\u96C6\u5408\u662F\u4E0D\u5B89\u5168\u7684\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u4E0D\u662F\u7EBF\u7A0B\u5B89\u5168\u7684\u3002\u8FD9\u610F\u5473\u7740\u5982\u679C\u591A\u4E2A\u7EBF\u7A0B\u540C\u65F6\u8BBF\u95EE\u8FD9\u4E9B\u96C6\u5408\uFF0C\u90A3\u4E48\u5B83\u4EEC\u53EF\u80FD\u4F1A\u51FA\u73B0\u4E0D\u53EF\u9884\u6599\u7684\u884C\u4E3A\u3002</p><p>Java \u4E2D\u7684\u5E76\u53D1\u4E0D\u5B89\u5168\u7684\u96C6\u5408\u5305\u62EC\uFF1A</p><ul><li><code>ArrayList</code></li><li><code>LinkedList</code></li><li><code>HashSet</code></li><li><code>HashMap</code></li><li><code>LinkedHashSet</code></li></ul><p>\u5982\u679C\u60F3\u5728\u591A\u7EBF\u7A0B\u73AF\u5883\u4E2D\u4F7F\u7528\u8FD9\u4E9B\u96C6\u5408\uFF0C\u5219\u5FC5\u987B\u4F7F\u7528\u540C\u6B65\u673A\u5236\u6765\u4FDD\u62A4\u5B83\u4EEC\uFF0C\u4F8B\u5982\u4F7F\u7528 <code>Collections.synchronizedList</code> \u6216 <code>Collections.synchronizedSet</code> \u8FD9\u4E9B\u65B9\u6CD5\u6765<strong>\u5305\u88C5\u8FD9\u4E9B\u96C6\u5408\u3002</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> myMap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> synchronizedMap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>\u5E76\u53D1\u5B89\u5168\u7684\u96C6\u5408</p></blockquote><p>\u5728 Java \u4E2D\uFF0C\u540C\u6837\u6709\u8BB8\u591A\u5185\u7F6E\u7684\u5E76\u53D1\u5B89\u5168\u7684\u96C6\u5408\u7C7B\u53EF\u4F9B\u4F7F\u7528\uFF0C\u4E0B\u9762\u5217\u4E3E\u7684\u8FD9\u4E9B\u7C7B\u9664\u4E86<code>Vector</code>\u548C<code>Hashtable</code>\u90FD\u5728 <code>java.util.concurrent</code> \u5305\u4E2D\u5B9A\u4E49\u3002</p><p>\u4E0B\u9762\u662F\u4E00\u4E9B\u5E38\u7528\u7684\u5E76\u53D1\u5B89\u5168\u7684\u96C6\u5408\u7C7B\uFF1A</p><ul><li><p><code>Vector</code></p></li><li><p><code>HashTable</code></p></li><li><p><code>ConcurrentHashMap</code></p><p>\u7EBF\u7A0B\u5B89\u5168\u7684\u54C8\u5E0C\u8868\uFF0C\u53EF\u4EE5\u5728\u591A\u4E2A\u7EBF\u7A0B\u4E4B\u95F4\u5B89\u5168\u5730\u8FDB\u884C\u8BFB\u5199\u64CD\u4F5C\u3002</p></li><li><p><code>CopyOnWriteArrayList</code></p><p>\u7EBF\u7A0B\u5B89\u5168\u7684\u52A8\u6001\u6570\u7EC4\uFF0C\u5199\u5165\u65F6\u4F1A\u8FDB\u884C\u590D\u5236\uFF0C\u56E0\u6B64\u8BFB\u64CD\u4F5C\u662F\u975E\u5E38\u9AD8\u6548\u7684\uFF0C\u4F46\u5199\u64CD\u4F5C\u4F1A\u6BD4\u8F83\u6162\u3002</p></li><li><p><code>BlockingQueue</code></p><p>\u7EBF\u7A0B\u5B89\u5168\u7684\u963B\u585E\u961F\u5217\uFF0C\u5F53\u961F\u5217\u4E3A\u7A7A\u65F6\uFF0C\u8BD5\u56FE\u4ECE\u961F\u5217\u4E2D\u83B7\u53D6\u5143\u7D20\u7684\u7EBF\u7A0B\u4F1A\u88AB\u963B\u585E\uFF1B\u5F53\u961F\u5217\u5DF2\u6EE1\u65F6\uFF0C\u8BD5\u56FE\u5411\u961F\u5217\u4E2D\u6DFB\u52A0\u5143\u7D20\u7684\u7EBF\u7A0B\u4E5F\u4F1A\u88AB\u963B\u585E\u3002</p><p>\u5E38\u7528\u7684\u5B9E\u73B0\u5305\u62EC <code>ArrayBlockingQueue</code> \u548C <code>LinkedBlockingQueue</code>\u3002</p></li><li><p><code>ConcurrentLinkedQueue</code></p><p>\u7EBF\u7A0B\u5B89\u5168\u7684\u65E0\u754C\u961F\u5217\uFF0C\u5B83\u4F7F\u7528\u94FE\u63A5\u8282\u70B9\u6765\u5B9E\u73B0\u961F\u5217\uFF0C\u56E0\u6B64\u63D2\u5165\u548C\u5220\u9664\u64CD\u4F5C\u975E\u5E38\u9AD8\u6548\u3002</p></li></ul><p>\u8FD9\u4E9B\u5E76\u53D1\u5B89\u5168\u7684\u96C6\u5408\u7C7B\u53EF\u4EE5\u4F7F\u7528 <code>java.util.concurrent.locks</code> \u5305\u4E2D\u7684\u9501\u548C\u5E76\u53D1\u63A7\u5236\u673A\u5236\u6765\u8FDB\u884C\u66F4\u7EC6\u7C92\u5EA6\u7684\u540C\u6B65\u3002</p><blockquote><p>\u6CE8\u610F\uFF1A\u5C3D\u7BA1\u8FD9\u4E9B\u7C7B\u662F\u7EBF\u7A0B\u5B89\u5168\u7684\uFF0C\u4F46\u4ECD\u7136\u5EFA\u8BAE\u4F7F\u7528\u540C\u6B65\u673A\u5236\u6765\u786E\u4FDD\u5728\u591A\u7EBF\u7A0B\u73AF\u5883\u4E0B\u7684\u6B63\u786E\u6267\u884C\u3002</p></blockquote><h2 id="hashmap-hashtable\u5B58\u5728\u7684\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#hashmap-hashtable\u5B58\u5728\u7684\u95EE\u9898" aria-hidden="true">#</a> HashMap\uFF0CHashTable\u5B58\u5728\u7684\u95EE\u9898</h2><blockquote><p>\u6211\u4EEC\u8FD9\u4E00\u7AE0\u8282\u8C08\u8BBA\u300C\u95EE\u9898\u300D\u7684\u524D\u63D0\u662F\u5E76\u53D1\u73AF\u5883\u4E0B\uFF0C\u501F\u7531\u5E76\u53D1\u73AF\u5883\u4E0B\u8FD9\u4E24\u4E2A\u96C6\u5408\u7684\u95EE\u9898\uFF0C\u6211\u4EEC\u80FD\u7406\u89E3\u4E3A\u4EC0\u4E48\u9700\u8981<code>ConcurrentHashMap</code>\u4EE5\u53CA\u5047\u5982\u5B9E\u73B0<code>ConcurrentHashMap</code>\u9700\u8981\u600E\u6837\u7684\u8BBE\u8BA1</p></blockquote><blockquote><p><code>HashMap</code>\u7EBF\u7A0B\u4E0D\u5B89\u5168</p></blockquote><p><code>HashMap</code> \u7684\u7EBF\u7A0B\u4E0D\u5B89\u5168\u662F\u7531\u4E8E\u5B83\u7684\u5B9E\u73B0\u65B9\u5F0F\u9020\u6210\u7684\u3002<code>HashMap</code> \u5E95\u5C42\u4F7F\u7528\u94FE\u8868\u6765\u5B58\u50A8\u6620\u5C04\u5173\u7CFB\uFF0C\u5982\u679C\u591A\u4E2A\u7EBF\u7A0B\u540C\u65F6\u8BBF\u95EE\u540C\u4E00\u4E2A <code>HashMap</code>\uFF0C\u5219\u53EF\u80FD\u4F1A\u5BFC\u81F4\u7ADE\u4E89\u6761\u4EF6\uFF0C\u5BFC\u81F4\u7EBF\u7A0B\u4E0D\u5B89\u5168\u3002</p><p>\u4F8B\u5982\uFF0C\u5982\u679C\u4E24\u4E2A\u7EBF\u7A0B\u540C\u65F6\u8C03\u7528 <code>HashMap</code> \u7684 <code>put</code> \u65B9\u6CD5\uFF0C\u5219\u53EF\u80FD\u4F1A\u5BFC\u81F4\u5176\u4E2D\u4E00\u4E2A\u7EBF\u7A0B\u7684\u66F4\u65B0\u88AB\u8986\u76D6\uFF0C\u6216\u8005\u4E24\u4E2A\u7EBF\u7A0B\u540C\u65F6\u8C03\u7528 <code>remove</code> \u65B9\u6CD5\uFF0C\u5BFC\u81F4\u67D0\u4E9B\u6761\u76EE\u88AB\u610F\u5916\u5220\u9664\u3002</p><blockquote><p><code>HashTalbe</code>\u7EBF\u7A0B\u5B89\u5168\uFF0C\u4F46\u662F\u6162</p></blockquote><p><code>Hashtable</code>\u4E4B\u6240\u4EE5\u6548\u7387\u4F4E\u4E0B\u4E3B\u8981\u662F\u56E0\u4E3A\u5176\u5B9E\u73B0\u4F7F\u7528\u4E86<code>synchronized</code>\u5173\u952E\u5B57\u5BF9<code>put</code>\u7B49\u64CD\u4F5C\u8FDB\u884C\u52A0\u9501</p><p>\u800C<code>synchronized</code>\u5173\u952E\u5B57\u52A0\u9501\u662F\u5BF9\u6574\u4E2A\u5BF9\u8C61\u8FDB\u884C\u52A0\u9501\uFF0C\u4E5F\u5C31\u662F\u8BF4\u5728\u8FDB\u884C<code>put</code>\u7B49\u4FEE\u6539<code>Hash</code>\u8868\u7684\u64CD\u4F5C\u65F6\uFF0C\u9501\u4F4F\u4E86\u6574\u4E2A<code>Hash</code>\u8868\uFF0C\u4ECE\u800C\u4F7F\u5F97\u5176\u8868\u73B0\u7684\u6548\u7387\u4F4E\u4E0B\u3002</p><h1 id="concurrenthashmap-\u539F\u7406" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap-\u539F\u7406" aria-hidden="true">#</a> ConcurrentHashMap \u539F\u7406</h1><h2 id="\u9501\u5206\u6BB5\u6280\u672F" tabindex="-1"><a class="header-anchor" href="#\u9501\u5206\u6BB5\u6280\u672F" aria-hidden="true">#</a> \u9501\u5206\u6BB5\u6280\u672F</h2><blockquote><p>\u4EC0\u4E48\u662F\u9501\u5206\u6BB5\u6280\u672F\uFF1F</p></blockquote><p><code>HashTable</code>\u5BB9\u5668\u5728\u7ADE\u4E89\u6FC0\u70C8\u7684\u5E76\u53D1\u73AF\u5883\u4E0B\u6548\u7387\u4F4E\u4E0B\uFF0C\u662F\u56E0\u4E3A\u6240\u6709\u8BBF\u95EE<code>HashTable</code>\u7684\u7EBF\u7A0B\u90FD\u5FC5\u987B\u7ADE\u4E89\u540C\u4E00\u628A\u9501\u3002</p><p>\u90A3\u4E48\u5047\u5982<strong>\u5BB9\u5668\u91CC\u6709\u591A\u628A\u9501\uFF0C\u6BCF\u4E00\u628A\u9501\u7528\u4E8E\u9501\u5BB9\u5668\u5176\u4E2D\u4E00\u90E8\u5206\u6570\u636E</strong>\uFF0C\u90A3\u4E48\u5F53\u591A\u7EBF\u7A0B<strong>\u8BBF\u95EE\u5BB9\u5668\u91CC\u4E0D\u540C\u7684\u6570\u636E\u6BB5\u7684\u6570\u636E\u65F6\uFF0C\u7EBF\u7A0B\u4E4B\u95F4\u5C31\u4E0D\u4F1A\u5B58\u5728\u9501\u7ADE\u4E89</strong>\uFF0C\u4ECE\u800C\u6709\u6548\u5730\u63D0\u9AD8\u5E76\u53D1\u8BBF\u95EE\u6548\u7387\uFF0C\u8FD9\u5C31\u662F<code>ConcurrentHashMap</code>\u6240\u4F7F\u7528\u7684\u9501\u5206\u6BB5\u6280\u672F\u3002</p><p>\u4E5F\u5C31\u662F\u5C06\u6570\u636E\u5206\u6210\u4E00\u6BB5\u4E00\u6BB5\u7684\u50A8\u5B58\uFF0C\u7136\u540E\u7ED9\u6BCF\u4E00\u6BB5\u6570\u636E\u914D\u4E00\u628A\u9501\uFF0C\u5F53\u4E00\u4E2A\u7EBF\u7A0B\u5360\u7528\u9501\u8BBF\u95EE\u4E00\u4E2A\u6BB5\u6570\u636E\u65F6\uFF0C\u5176\u4ED6\u7684\u6BB5\u6570\u636E\u4E5F\u662F\u53EF\u4EE5\u88AB\u5176\u4ED6\u7EBF\u7A0B\u8BBF\u95EE\u7684\u3002</p><p>\u53E6\u5916\uFF0C<strong><code>ConcurrentHashMap</code>\u662F\u53EF\u4EE5\u505A\u5230\u8BFB\u53D6\u6570\u636E\u4E0D\u52A0\u9501</strong>\uFF0C\u5E76\u4E14\u5176\u5185\u90E8\u7684\u7ED3\u6784\u53EF\u4EE5\u8BA9\u5176\u5728\u8FDB\u884C\u5199\u64CD\u4F5C\u65F6\u80FD\u591F\u5C06\u9501\u7684\u7C92\u5EA6\u4FDD\u6301\u5C3D\u91CF\u7684\u5C0F\uFF0C\u4E0D\u7528\u5BF9\u6574\u4E2A<code>ConcurrentHashMap</code>\u52A0\u9501\u3002</p><blockquote><p>\u5728\u7406\u89E3\u4E86\u9501\u5206\u6BB5\u6280\u672F\u4E4B\u540E\uFF0C\u6211\u4EEC\u770B<code>ConcurrentHashMap</code>\u7ED3\u6784\u5C31\u4F1A\u66F4\u52A0\u6E05\u6670</p><p>\u4F46\u662F\u9700\u8981\u6CE8\u610F\u7684\u662F\u9501\u5206\u6BB5\u6280\u672F\u662FJDK1.7\u4E2D\u7684\u5B9E\u73B0\u7B56\u7565\uFF0C\u5728JDK1.8\u4E2D\u4F7F\u7528<code>CAS</code>\u548C<code>synchronized</code>\u6765\u52A0\u9501\u3002</p><p>\u4E8B\u4E0D\u5B9C\u8FDF\uFF0C\u63A5\u7740\u5C31\u5230\u6211\u4EEC\u7684\u6E90\u7801\u73AF\u8282\uFF01</p></blockquote><h1 id="concurrenthashmap-\u6E90\u7801" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap-\u6E90\u7801" aria-hidden="true">#</a> ConcurrentHashMap \u6E90\u7801</h1><blockquote><p><code>ConcurrentHashMap</code>\u7684\u6E90\u7801\u5728JDK1.7\u548CJDK1.8\u6709\u6240\u4E0D\u540C\uFF0C\u6240\u4EE5\u5F88\u591A\u6E90\u7801\u6211\u4EEC\u4F1A\u5206\u4E24\u4E2A\u7248\u672C\u8FDB\u884C\u8BA8\u8BBA\u3002</p></blockquote><blockquote><p><code>ConcurrentHashMap</code>\u7EE7\u627F\u5173\u7CFB</p></blockquote><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c59d9dc5b264ed58b70faeff9722266~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="concurrenthashmap-\u5185\u90E8\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap-\u5185\u90E8\u7ED3\u6784" aria-hidden="true">#</a> ConcurrentHashMap \u5185\u90E8\u7ED3\u6784</h2><ul><li><blockquote><p>JDK1.7</p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74700d8e79444616bd1ef6ccd89601e8~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>\u7531\u56FE\u4E2D\u53EF\u4EE5\u770B\u51FA\uFF0C\u6211\u4EEC\u53EF\u4EE5\u5C06\u6574\u5F20<code>ConcurrentHashMap</code>\u5212\u5206\u6210\u4E0D\u540C\u7684\u6BB5\uFF08<code>Segment</code>\uFF09\uFF0C\u6BCF\u4E2A<code>Segment</code>\u53EF\u4EE5\u770B\u505A\u4E00\u4E2A<code>HashTable</code>\uFF0C\u6BCF\u4E2A<code>HashTable</code>\u4F7F\u7528\u4E0D\u540C\u7684\u9501\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> segments<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u7B80\u5355\u6765\u8BF4<code>ConcurrentHashMap</code>\u662F\u4E00\u4E2A<code>Segment</code>\u6570\u7EC4\uFF0C<code>Segment</code> \u901A\u8FC7\u7EE7\u627F <code>ReentrantLock</code> \u6765\u8FDB\u884C\u52A0\u9501\uFF0C\u6240\u4EE5\u6BCF\u6B21\u9700\u8981\u52A0\u9501\u7684\u64CD\u4F5C\u9501\u4F4F\u7684\u662F\u4E00\u4E2A <code>segment</code>\uFF0C\u8FD9\u6837<strong>\u53EA\u8981\u4FDD\u8BC1\u6BCF\u4E2A <code>Segment</code> \u662F\u7EBF\u7A0B\u5B89\u5168\u7684\uFF0C\u4E5F\u5C31\u5B9E\u73B0\u4E86\u5168\u5C40\u7684\u7EBF\u7A0B\u5B89\u5168\u3002</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">ReentrantLock</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">2249069246763182397L</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_SCAN_RETRIES</span> <span class="token operator">=</span>
        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">64</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">// HashEntry\u6570\u7EC4</span>
    <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>

    <span class="token keyword">transient</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>

    <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span>

    <span class="token keyword">transient</span> <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>

    <span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>

    <span class="token class-name">Segment</span><span class="token punctuation">(</span><span class="token keyword">float</span> lf<span class="token punctuation">,</span> <span class="token keyword">int</span> threshold<span class="token punctuation">,</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> lf<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> threshold<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>table <span class="token operator">=</span> tab<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><code>Segment</code>\u5185\u90E8\u7EF4\u62A4\u4E86\u4E00\u4E2A\u94FE\u8868\u6570\u7EC4\uFF08\u4E0A\u9762\u7684<code>table</code>\uFF09\uFF0C\u4E5F\u5C31\u662F\u8BF4\u4E00\u4E2A<code>entry</code>\u5373\u94FE\u8868\u4E2D\u7684\u4E00\u4E2A\u5B9E\u4F53\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
     <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>
     <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
     <span class="token keyword">volatile</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>
     <span class="token keyword">volatile</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>

     <span class="token class-name">HashEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul><ul><li><blockquote><p>JDK1.8</p></blockquote><p>\u5728JDK1.7\u4E4B\u524D\uFF0C<code>ConcurrentHashMap</code>\u662F\u901A\u8FC7\u5206\u6BB5\u9501\u673A\u5236\u6765\u5B9E\u73B0\u7684\uFF0C\u6240\u4EE5\u5176<strong>\u6700\u5927\u5E76\u53D1\u5EA6\u53D7<code>Segment</code>\u7684\u4E2A\u6570\u9650\u5236\u3002</strong></p><p>\u56E0\u6B64\uFF0C\u5728JDK1.8\u4E2D\uFF0C<code>ConcurrentHashMap</code>\u7684\u5B9E\u73B0\u539F\u7406\u6452\u5F03\u4E86\u8FD9\u79CD\u8BBE\u8BA1\uFF0C\u800C\u662F<strong>\u9009\u62E9\u4E86\u4E0E<code>HashMap</code>\u7C7B\u4F3C\u7684\u6570\u7EC4+\u94FE\u8868+\u7EA2\u9ED1\u6811\u7684\u65B9\u5F0F\u5B9E\u73B0</strong>\uFF0C\u800C<strong>\u52A0\u9501\u5219\u91C7\u7528<code>CAS</code>\u548C<code>synchronized</code>\u5B9E\u73B0\u3002</strong></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/247a3dc2a8b2473b943b7d9b29e29982~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u6CE8\u610F\u5230\u6211\u4EEC\u4E0A\u9762\u6807\u6CE8\u7684\u67095\u79CD\u4E0D\u540C\u7684\u8282\u70B9\u7C7B\u578B\uFF0C\u5B83\u4EEC\u5206\u522B\u4E3A\uFF1A<code>Node</code>\u3001<code>TreeBin</code>\u3001<code>TreeNode</code>\u3001<code>ForwardingNode</code>\u3001<code>ReservationNode</code></p><p>\u5BF9\u4E8E<code>Node</code>\u3001<code>TreeNode</code>\u6211\u4EEC\u53EF\u4EE5\u7406\u89E3\uFF0C\u6BD5\u7ADF\u4E00\u4E2A\u662F\u94FE\u8868\u8282\u70B9\uFF0C\u4E00\u4E2A\u662F\u6811\u8282\u70B9\u3002\u53EF\u662F\u4E3A\u4EC0\u4E48\u7EA2\u9ED1\u6811\u7684\u6839\u8282\u70B9\u662F<code>TreeBin</code>\u800C\u4E0D\u662F<code>TreeNode</code>\uFF0C\u53E6\u5916<code>ForwardingNode</code>\u548C<code>ReservationNode</code>\u53C8\u662F\u4EC0\u4E48\u5462\uFF1F</p><p>\u63A5\u7740\u6211\u4EEC\u4F9D\u6B21\u89E3\u51B3\u8FD9\u51E0\u4E2A\u95EE\u9898\u3002</p><ul><li><blockquote><p>\u4E3A\u4EC0\u4E48\u7528<code>TreeBin</code>\uFF0C\u4E0D\u7528<code>TreeNode</code>\uFF1F</p></blockquote><p>\u5BF9\u4E8E\u7EA2\u9ED1\u6570\u7684\u5DE6\u65CB\u548C\u53F3\u65CB\u7684\u5E73\u8861\u64CD\u4F5C\uFF0C<code>ConcurrentHashMap</code>\u7528<code>TreeBin</code>\u5145\u5F53\u4EE3\u7406\u6765\u8FDB\u884C\u8FD9\u4E9B\u64CD\u4F5C\uFF0C\u800C<code>TreeNode</code>\u8282\u70B9\u53EA\u6709\u67E5\u627E\u65B9\u6CD5\u3002</p></li><li><blockquote><p><code>ForwardingNode</code>\u548C<code>ReservationNode</code>\u5404\u662F\u4EC0\u4E48\uFF1F</p></blockquote><ul><li><p><code>ForwardingNode</code></p><p>\u5728\u8F6C\u6362\u64CD\u4F5C\u65F6\u63D2\u5165\u5230\u5934\u90E8\u7684\u4E00\u4E2A\u8282\u70B9\uFF0C\u548C<code>ConcurrentHashMap</code>\u7684\u6269\u5BB9\uFF0C\u7F29\u5BB9\u6709\u5173\u7CFB\u3002</p></li><li><p><code>ReservationNode</code></p><p>\u8D77\u5230\u4E00\u4E2A\u5360\u4F4D\u7684\u4F5C\u7528</p></li></ul></li></ul></li></ul><h2 id="\u521D\u59CB\u5316" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5316" aria-hidden="true">#</a> \u521D\u59CB\u5316</h2><ul><li><blockquote><p>JDK1.7</p></blockquote><p>\u65E0\u53C2\u6784\u9020\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_CONCURRENCY_LEVEL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u65E0\u53C2\u6784\u9020\u65B9\u6CD5\u8C03\u7528\u4E86\u6709\u53C2\u6784\u9020\uFF0C\u4F20\u5165\u4E09\u4E2A\u5E38\u91CF\u53C2\u6570</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * \u9ED8\u8BA4\u521D\u59CB\u5316\u5BB9\u91CF
 */</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * \u9ED8\u8BA4\u8D1F\u8F7D\u56E0\u5B50
 */</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * \u9ED8\u8BA4\u5E76\u53D1\u7EA7\u522B
 */</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CONCURRENCY_LEVEL</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>\u63A5\u7740\u770B\u88AB\u8C03\u7528\u7684\u6709\u53C2\u6784\u9020\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span><span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span> <span class="token keyword">int</span> concurrencyLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u53C2\u6570\u6821\u9A8C</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>loadFactor <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> concurrencyLevel <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u6821\u9A8C\u5E76\u53D1\u7EA7\u522B\u5927\u5C0F\uFF0C\u5927\u4E8E 1&lt;&lt;16\uFF0C\u91CD\u7F6E\u4E3A 65536</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>concurrencyLevel <span class="token operator">&gt;</span> <span class="token constant">MAX_SEGMENTS</span><span class="token punctuation">)</span>
        concurrencyLevel <span class="token operator">=</span> <span class="token constant">MAX_SEGMENTS</span><span class="token punctuation">;</span>
    <span class="token comment">// 2\u7684\u591A\u5C11\u6B21\u65B9</span>
    <span class="token keyword">int</span> sshift <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ssize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8FD9\u4E2A\u5FAA\u73AF\u53EF\u4EE5\u627E\u5230 concurrencyLevel \u4E4B\u4E0A\u6700\u8FD1\u7684 2\u7684\u6B21\u65B9\u503C</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>ssize <span class="token operator">&lt;</span> concurrencyLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>sshift<span class="token punctuation">;</span>
        ssize <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u8BB0\u5F55\u6BB5\u504F\u79FB\u91CF</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>segmentShift <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">-</span> sshift<span class="token punctuation">;</span>
    <span class="token comment">// \u8BB0\u5F55\u6BB5\u63A9\u7801</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>segmentMask <span class="token operator">=</span> ssize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8BBE\u7F6E\u5BB9\u91CF</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span>
        initialCapacity <span class="token operator">=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">;</span>
    <span class="token comment">// c = \u5BB9\u91CF / ssize \uFF0C\u9ED8\u8BA4 16 / 16 = 1\uFF0C\u8FD9\u91CC\u662F\u8BA1\u7B97\u6BCF\u4E2A Segment \u4E2D\u7684\u7C7B\u4F3C\u4E8E HashMap \u7684\u5BB9\u91CF</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> initialCapacity <span class="token operator">/</span> ssize<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">*</span> ssize <span class="token operator">&lt;</span> initialCapacity<span class="token punctuation">)</span>
        <span class="token operator">++</span>c<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cap <span class="token operator">=</span> <span class="token constant">MIN_SEGMENT_TABLE_CAPACITY</span><span class="token punctuation">;</span>
    <span class="token comment">//Segment \u4E2D\u7684\u7C7B\u4F3C\u4E8E HashMap \u7684\u5BB9\u91CF\u81F3\u5C11\u662F2\u6216\u80052\u7684\u500D\u6570</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cap <span class="token operator">&lt;</span> c<span class="token punctuation">)</span>
        cap <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// \u521B\u5EFA Segment \u6570\u7EC4\uFF0C\u8BBE\u7F6E segments[0]</span>
    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> s0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>cap <span class="token operator">*</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">,</span>
                         <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token punctuation">[</span>cap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token punctuation">[</span>ssize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">putOrderedObject</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> <span class="token constant">SBASE</span><span class="token punctuation">,</span> s0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ordered write of segments[0]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>segments <span class="token operator">=</span> ss<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>\u53C2\u6570\u7684\u542B\u4E49\u5982\u4E0B\uFF1A</p><ul><li><p><code>initialCapacity</code></p><p>\u521D\u59CB\u5BB9\u91CF\uFF0C\u8FD9\u4E2A\u503C\u6307\u7684\u662F\u6574\u4E2A <code>ConcurrentHashMap</code> \u7684\u521D\u59CB\u5BB9\u91CF\uFF0C\u5B9E\u9645\u64CD\u4F5C\u7684\u65F6\u5019\u9700\u8981\u5E73\u5747\u5206\u7ED9\u6BCF\u4E2A <code>Segment</code>\u3002</p></li><li><p><code>loadFactor</code></p><p>\u8D1F\u8F7D\u56E0\u5B50\uFF0C\u6211\u4EEC\u77E5\u9053<code>Segment</code>\u6570\u7EC4\u4E0D\u53EF\u4EE5\u6269\u5BB9\uFF0C\u6240\u4EE5\u8FD9\u4E2A\u8D1F\u8F7D\u56E0\u5B50\u662F\u7ED9\u6BCF\u4E2A <code>Segment</code> \u5185\u90E8\u4F7F\u7528\u7684\u3002</p></li><li><p><code>concurrencyLevel</code></p><p>\u53EF\u4EE5\u53EB\u6210 \u5E76\u884C\u7EA7\u522B\u3001\u5E76\u53D1\u6570\u3001<code>Segment</code> \u6570\u3002</p><p>\u9ED8\u8BA4\u662F 16\uFF0C\u4E5F\u5C31\u662F\u8BF4 <code>ConcurrentHashMap</code> \u6709 16 \u4E2A <code>Segments</code>\uFF0C\u6240\u4EE5\u7406\u8BBA\u4E0A\uFF0C\u5728\u8FD9\u4E2A\u65F6\u5019\uFF0C<strong>\u6700\u591A\u53EF\u4EE5\u540C\u65F6\u652F\u6301 16 \u4E2A\u7EBF\u7A0B\u5E76\u53D1\u5199</strong>\uFF0C\u53EA\u8981\u5B83\u4EEC\u7684\u64CD\u4F5C\u5206\u522B\u5206\u5E03\u5728\u4E0D\u540C\u7684 <code>Segment</code>\u4E0A\u3002</p><p>\u8FD9\u4E2A\u503C<strong>\u53EF\u4EE5\u5728\u521D\u59CB\u5316\u7684\u65F6\u5019\u8BBE\u7F6E\u4E3A\u5176\u4ED6\u503C</strong>\uFF0C\u4F46\u662F<strong>\u4E00\u65E6\u521D\u59CB\u5316\u4EE5\u540E\uFF0C\u5B83\u662F\u4E0D\u53EF\u4EE5\u6269\u5BB9\u7684\u3002</strong></p></li></ul><p>\u6574\u4F53\u6D41\u7A0B\u5982\u4E0B\uFF1A</p><ul><li>\u5FC5\u8981\u53C2\u6570\u6821\u9A8C\u3002</li><li>\u6821\u9A8C\u5E76\u53D1\u7EA7\u522B <code>concurrencyLevel</code> \u5927\u5C0F\uFF0C\u5982\u679C\u5927\u4E8E\u6700\u5927\u503C\uFF0C\u91CD\u7F6E\u4E3A\u6700\u5927\u503C\u3002\u65E0\u53C2\u6784\u9020<strong>\u9ED8\u8BA4\u503C\u662F 16.</strong></li><li>\u5BFB\u627E\u5E76\u53D1\u7EA7\u522B <code>concurrencyLevel</code> \u4E4B\u4E0A\u6700\u8FD1\u7684 <strong>2 \u7684\u5E42\u6B21\u65B9</strong>\u503C\uFF0C\u4F5C\u4E3A\u521D\u59CB\u5316\u5BB9\u91CF\u5927\u5C0F\uFF0C<strong>\u9ED8\u8BA4\u662F 16</strong>\u3002</li><li>\u8BB0\u5F55 <code>segmentShift</code> \u504F\u79FB\u91CF\uFF0C\u8FD9\u4E2A\u503C\u4E3A\u3010\u5BB9\u91CF = 2 \u7684N\u6B21\u65B9\u3011\u4E2D\u7684 N\uFF0C\u5728\u540E\u9762 Put \u65F6\u8BA1\u7B97\u4F4D\u7F6E\u65F6\u4F1A\u7528\u5230\u3002<strong>\u9ED8\u8BA4\u662F 32 - sshift = 28</strong>.</li><li>\u8BB0\u5F55 <code>segmentMask</code>\uFF0C\u9ED8\u8BA4\u662F ssize - 1 = 16 -1 = 15.</li><li><strong>\u521D\u59CB\u5316 <code>segments[0]</code></strong> \uFF0C<strong>\u9ED8\u8BA4\u5927\u5C0F\u4E3A 2</strong>\uFF0C<strong>\u8D1F\u8F7D\u56E0\u5B50 0.75</strong>\uFF0C<strong>\u6269\u5BB9\u9600\u503C\u662F 2*0.75=1.5</strong>\uFF0C\u63D2\u5165\u7B2C\u4E8C\u4E2A\u503C\u65F6\u624D\u4F1A\u8FDB\u884C\u6269\u5BB9\u3002</li></ul><p>\u521D\u59CB\u5316\u5B8C\u6210\u6211\u4EEC\u5C31\u83B7\u5F97\u4E86\u4E00\u4E2A <code>Segment</code> \u6570\u7EC4\u3002</p><ul><li><blockquote><p>\u5B9A\u4F4D\u6BB5\u7684\u65B9\u6CD5</p></blockquote><p>\u8FD9\u91CC\u7684\u5B9A\u4F4D\u6BB5\u7684\u65B9\u6CD5\u4E3B\u8981\u7528\u7684\u5C31\u662F\u4E0A\u9762\u51FA\u73B0\u7684\u4E24\u4E2A\u91CF\uFF1A<code>segmentShift</code>\uFF0C<code>segmentMask</code></p><p>\u4E3A\u4E86<strong>\u52A0\u5FEB\u5B9A\u4F4D\u6BB5\u4EE5\u53CA\u6BB5\u4E2Dhash\u69FD\u7684\u901F\u5EA6</strong>\uFF0C\u6BCF\u4E2A\u6BB5hash\u69FD\u7684\u7684\u4E2A\u6570\u90FD\u662F2^n\uFF0C\u8FD9\u4F7F\u5F97\u901A\u8FC7\u4F4D\u8FD0\u7B97\u5C31\u53EF\u4EE5\u5B9A\u4F4D\u6BB5\u548C\u6BB5\u4E2Dhash\u69FD\u7684\u4F4D\u7F6E\u3002</p><p>\u5F53\u5E76\u53D1\u7EA7\u522B\u4E3A\u9ED8\u8BA4\u503C16\u65F6\uFF0C\u4E5F\u5C31\u662F\u6BB5\u7684\u4E2A\u6570\uFF0C<strong>hash\u503C\u7684\u9AD84\u4F4D\u51B3\u5B9A\u5206\u914D\u5728\u54EA\u4E2A\u6BB5\u4E2D\uFF0C\u540E\u56DB\u4F4D\u51B3\u5B9A\u6BB5\u4E2D\u7684\u5750\u6807\u3002</strong></p><p>\u5BF9\u5E94\u6E90\u7801\u4E2D\u7684<code>segmentFor</code>\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">segmentFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> segments<span class="token punctuation">[</span><span class="token punctuation">(</span>hash <span class="token operator">&gt;&gt;&gt;</span> segmentShift<span class="token punctuation">)</span> <span class="token operator">&amp;</span> segmentMask<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li></ul><ul><li><blockquote><p>JDK1.8</p></blockquote><p>\u521D\u59CB\u5316\u65B9\u6CD5\u4E3A<code>initTable</code>\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//\u3000\u5982\u679C sizeCtl &lt; 0 ,\u8BF4\u660E\u53E6\u5916\u7684\u7EBF\u7A0B\u6267\u884CCAS \u6210\u529F\uFF0C\u6B63\u5728\u8FDB\u884C\u521D\u59CB\u5316\u3002</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token comment">// \u8BA9\u51FA CPU \u4F7F\u7528\u6743</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lost initialization race; just spin</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> <span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">;</span>
                    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    table <span class="token operator">=</span> tab <span class="token operator">=</span> nt<span class="token punctuation">;</span>
                    sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> tab<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>\u4ECE\u6E90\u7801\u4E2D\u53EF\u4EE5\u53D1\u73B0 <code>ConcurrentHashMap</code> \u7684\u521D\u59CB\u5316\u662F\u901A\u8FC7<strong>\u81EA\u65CB\u548C <code>CAS</code></strong> \u64CD\u4F5C\u5B8C\u6210\u7684\u3002\u91CC\u9762\u9700\u8981\u6CE8\u610F\u7684\u662F\u53D8\u91CF <code>sizeCtl</code> \uFF0C\u5B83\u7684\u503C\u4EE3\u8868\u7740<strong>table \u521D\u59CB\u5316\u548C\u6269\u5BB9\u7684\u72B6\u6001\u6807\u8BC6</strong>\uFF1A</p><ul><li>-1\uFF1A \u8BF4\u660E\u6B63\u5728\u521D\u59CB\u5316</li></ul><ul><li>-N\uFF1A \u8BF4\u660E\u6709N-1\u4E2A\u7EBF\u7A0B\u6B63\u5728\u8FDB\u884C\u6269\u5BB9</li><li><code>&gt;0</code>\uFF1A\u6570\u7EC4\u521D\u59CB\u5316\u540E\u7684\u5BB9\u91CF</li></ul><ul><li>0\uFF1A\u9ED8\u8BA4\u521D\u59CB\u503C</li></ul></li></ul><h2 id="put-\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#put-\u65B9\u6CD5" aria-hidden="true">#</a> put \u65B9\u6CD5</h2><ul><li><blockquote><p>JDK1.7</p></blockquote><p>\u6E90\u7801\u5982\u4E0B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> s<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// hash \u503C\u65E0\u7B26\u53F7\u53F3\u79FB 28\u4F4D\uFF08\u521D\u59CB\u5316\u65F6\u83B7\u5F97\uFF09\uFF0C\u7136\u540E\u4E0E segmentMask=15 \u505A\u4E0E\u8FD0\u7B97</span>
    <span class="token comment">// \u5176\u5B9E\u4E5F\u5C31\u662F\u628A\u9AD84\u4F4D\u4E0EsegmentMask\uFF081111\uFF09\u505A\u4E0E\u8FD0\u7B97</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&gt;&gt;&gt;</span> segmentShift<span class="token punctuation">)</span> <span class="token operator">&amp;</span> segmentMask<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span>getObject          <span class="token comment">// nonvolatile; recheck</span>
         <span class="token punctuation">(</span>segments<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;&lt;</span> <span class="token constant">SSHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">SBASE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//  in ensureSegment</span>
        <span class="token comment">// \u5982\u679C\u67E5\u627E\u5230\u7684 Segment \u4E3A\u7A7A\uFF0C\u521D\u59CB\u5316</span>
        s <span class="token operator">=</span> <span class="token function">ensureSegment</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">ensureSegment</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>segments<span class="token punctuation">;</span>
    <span class="token keyword">long</span> u <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token constant">SSHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">SBASE</span><span class="token punctuation">;</span> <span class="token comment">// raw offset</span>
    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> seg<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>seg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u8FD9\u91CC\u770B\u5230\u4E3A\u4EC0\u4E48\u4E4B\u524D\u8981\u521D\u59CB\u5316 segment[0] \u4E86\uFF0C</span>
        <span class="token comment">// \u4F7F\u7528\u5F53\u524D segment[0] \u5904\u7684\u6570\u7EC4\u957F\u5EA6\u548C\u8D1F\u8F7D\u56E0\u5B50\u6765\u521D\u59CB\u5316 segment[k]</span>
        <span class="token comment">// \u4E3A\u4EC0\u4E48\u8981\u7528\u201C\u5F53\u524D\u201D\uFF0C\u56E0\u4E3A segment[0] \u53EF\u80FD\u65E9\u5C31\u6269\u5BB9\u8FC7\u4E86</span>
        <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> proto <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> cap <span class="token operator">=</span> proto<span class="token punctuation">.</span>table<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">float</span> lf <span class="token operator">=</span> proto<span class="token punctuation">.</span>loadFactor<span class="token punctuation">;</span>
        <span class="token keyword">int</span> threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>cap <span class="token operator">*</span> lf<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// \u521D\u59CB\u5316 segment[k] \u5185\u90E8\u7684\u6570\u7EC4</span>
        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token punctuation">[</span>cap<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>seg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u518D\u6B21\u68C0\u67E5\u4E00\u904D\u8BE5\u69FD\u662F\u5426\u88AB\u5176\u4ED6\u7EBF\u7A0B\u521D\u59CB\u5316\u4E86\u3002</span>

            <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>lf<span class="token punctuation">,</span> threshold<span class="token punctuation">,</span> tab<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u4F7F\u7528 while \u5FAA\u73AF\uFF0C\u5185\u90E8\u7528 CAS\uFF0C\u5F53\u524D\u7EBF\u7A0B\u6210\u529F\u8BBE\u503C\u6216\u5176\u4ED6\u7EBF\u7A0B\u6210\u529F\u8BBE\u503C\u540E\uFF0C\u9000\u51FA</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>seg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span>
                   <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> seg <span class="token operator">=</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> seg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>\u6574\u4F53\u6D41\u7A0B\uFF1A</p><ul><li><p>\u8BA1\u7B97\u8981 <code>put</code> \u7684 key \u7684\u4F4D\u7F6E\uFF0C\u83B7\u53D6\u6307\u5B9A\u4F4D\u7F6E\u7684 <code>Segment</code>\u3002</p></li><li><p>\u5982\u679C\u6307\u5B9A\u4F4D\u7F6E\u7684 <code>Segment</code> \u4E3A\u7A7A\uFF0C\u5219\u521D\u59CB\u5316\u8FD9\u4E2A <code>Segment</code>.</p><ul><li><blockquote><p>\u521D\u59CB\u5316<code>Segment</code>\u6D41\u7A0B\uFF08<code>ensureSegment</code>\u65B9\u6CD5\u6D41\u7A0B\uFF09</p></blockquote><ul><li>\u68C0\u67E5\u8BA1\u7B97\u5F97\u5230\u7684\u4F4D\u7F6E\u7684 <code>Segment</code> \u662F\u5426\u4E3Anull.</li><li>\u4E3A null \u7EE7\u7EED\u521D\u59CB\u5316\uFF0C\u4F7F\u7528 <code>Segment[0]</code> \u7684\u5BB9\u91CF\u548C\u8D1F\u8F7D\u56E0\u5B50\u521B\u5EFA\u4E00\u4E2A <code>HashEntry</code> \u6570\u7EC4\u3002</li><li>\u518D\u6B21\u68C0\u67E5\u8BA1\u7B97\u5F97\u5230\u7684\u6307\u5B9A\u4F4D\u7F6E\u7684 <code>Segment</code> \u662F\u5426\u4E3Anull.</li><li>\u4F7F\u7528\u521B\u5EFA\u7684 <code>HashEntry</code> \u6570\u7EC4\u521D\u59CB\u5316\u8FD9\u4E2A <code>Segment</code>.</li><li>\u81EA\u65CB\u5224\u65AD\u8BA1\u7B97\u5F97\u5230\u7684\u6307\u5B9A\u4F4D\u7F6E\u7684 <code>Segment</code> \u662F\u5426\u4E3Anull\uFF0C\u4F7F\u7528 <code>CAS</code> \u5728\u8FD9\u4E2A\u4F4D\u7F6E\u8D4B\u503C\u4E3A <code>Segment</code>.</li></ul></li></ul></li><li><p><code>Segment.put</code> \u63D2\u5165 key,value \u503C\u3002</p></li></ul><p>\u63A5\u7740\u6765\u770B<code>Segment.put</code>\u65B9\u6CD5\u7684\u6E90\u7801\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u83B7\u53D6 ReentrantLock \u72EC\u5360\u9501\uFF0C\u83B7\u53D6\u4E0D\u5230\uFF0CscanAndLockForPut \u83B7\u53D6\u3002</span>
    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">scanAndLockForPut</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">V</span> oldValue<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>
        <span class="token comment">// \u8BA1\u7B97\u8981put\u7684\u6570\u636E\u4F4D\u7F6E</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>tab<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">;</span>
        <span class="token comment">// CAS \u83B7\u53D6 index \u5750\u6807\u7684\u503C</span>
        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> <span class="token function">entryAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> first<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u68C0\u67E5\u662F\u5426 key \u5DF2\u7ECF\u5B58\u5728\uFF0C\u5982\u679C\u5B58\u5728\uFF0C\u5219\u904D\u5386\u94FE\u8868\u5BFB\u627E\u4F4D\u7F6E\uFF0C\u627E\u5230\u540E\u66FF\u6362 value</span>
                <span class="token class-name">K</span> k<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>
                    <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
                        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// first \u6709\u503C\u6CA1\u8BF4\u660E index \u4F4D\u7F6E\u5DF2\u7ECF\u6709\u503C\u4E86\uFF0C\u6709\u51B2\u7A81\uFF0C\u94FE\u8868\u5934\u63D2\u6CD5\u3002</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> c <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token comment">// \u5BB9\u91CF\u5927\u4E8E\u6269\u5BB9\u9600\u503C\uFF0C\u5C0F\u4E8E\u6700\u5927\u5BB9\u91CF\uFF0C\u8FDB\u884C\u6269\u5BB9</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> threshold <span class="token operator">&amp;&amp;</span> tab<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span>
                    <span class="token function">rehash</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    <span class="token comment">// index \u4F4D\u7F6E\u8D4B\u503C node\uFF0Cnode \u53EF\u80FD\u662F\u4E00\u4E2A\u5143\u7D20\uFF0C\u4E5F\u53EF\u80FD\u662F\u4E00\u4E2A\u94FE\u8868\u7684\u8868\u5934</span>
                    <span class="token function">setEntryAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
                count <span class="token operator">=</span> c<span class="token punctuation">;</span>
                oldValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><p>\u7531\u4E8E <code>Segment</code> \u7EE7\u627F\u4E86 <code>ReentrantLock</code>\uFF0C\u6240\u4EE5 <strong><code>Segment</code> \u5185\u90E8\u53EF\u4EE5\u5F88\u65B9\u4FBF\u7684\u83B7\u53D6\u9501</strong>\uFF0C<code>put</code> \u6D41\u7A0B\u5C31\u7528\u5230\u4E86\u8FD9\u4E2A\u529F\u80FD\u3002</p><ul><li><code>tryLock()</code> \u83B7\u53D6\u9501\uFF0C\u83B7\u53D6\u4E0D\u5230\u4F7F\u7528 <strong><code>scanAndLockForPut</code></strong> \u65B9\u6CD5\u7EE7\u7EED\u83B7\u53D6\u3002</li></ul><ul><li>\u8BA1\u7B97 <code>put</code> \u7684\u6570\u636E\u8981\u653E\u5165\u7684 <code>index</code> \u4F4D\u7F6E\uFF0C\u7136\u540E\u83B7\u53D6\u8FD9\u4E2A\u4F4D\u7F6E\u4E0A\u7684 <code>HashEntry</code> \u3002</li></ul><ul><li><p>\u904D\u5386 <code>put</code> \u65B0\u5143\u7D20\uFF0C\u4E3A\u4EC0\u4E48\u8981\u904D\u5386\uFF1F\u56E0\u4E3A\u8FD9\u91CC\u83B7\u53D6\u7684 <code>HashEntry</code> \u53EF\u80FD\u662F\u4E00\u4E2A\u7A7A\u5143\u7D20\uFF0C\u4E5F\u53EF\u80FD\u662F\u94FE\u8868\u5DF2\u5B58\u5728\uFF0C\u6240\u4EE5\u8981\u533A\u522B\u5BF9\u5F85\u3002</p><ul><li><p>\u5982\u679C\u8FD9\u4E2A\u4F4D\u7F6E\u4E0A\u7684 <strong><code>HashEntry</code> \u4E0D\u5B58\u5728</strong>\uFF1A</p><ul><li>\u5982\u679C\u5F53\u524D\u5BB9\u91CF\u5927\u4E8E\u6269\u5BB9\u9600\u503C\uFF0C\u5C0F\u4E8E\u6700\u5927\u5BB9\u91CF\uFF0C<strong>\u8FDB\u884C\u6269\u5BB9</strong>\u3002</li></ul><ul><li>\u76F4\u63A5\u5934\u63D2\u6CD5\u63D2\u5165\u3002</li></ul></li><li><p>\u5982\u679C\u8FD9\u4E2A\u4F4D\u7F6E\u4E0A\u7684 <strong><code>HashEntry</code> \u5B58\u5728</strong>\uFF1A</p><ul><li>\u5224\u65AD\u94FE\u8868\u5F53\u524D\u5143\u7D20 key \u548C hash \u503C\u662F\u5426\u548C\u8981 <code>put</code> \u7684 key \u548C hash \u503C\u4E00\u81F4\u3002\u4E00\u81F4\u5219\u66FF\u6362\u503C</li></ul><ul><li><p>\u4E0D\u4E00\u81F4\uFF0C\u83B7\u53D6\u94FE\u8868\u4E0B\u4E00\u4E2A\u8282\u70B9\uFF0C\u76F4\u5230\u53D1\u73B0\u76F8\u540C\u8FDB\u884C\u503C\u66FF\u6362\uFF0C\u6216\u8005\u94FE\u8868\u8868\u91CC\u5B8C\u6BD5\u6CA1\u6709\u76F8\u540C\u7684\u3002</p><ul><li>\u5982\u679C\u5F53\u524D\u5BB9\u91CF\u5927\u4E8E\u6269\u5BB9\u9600\u503C\uFF0C\u5C0F\u4E8E\u6700\u5927\u5BB9\u91CF\uFF0C<strong>\u8FDB\u884C\u6269\u5BB9</strong>\u3002</li></ul><ul><li>\u76F4\u63A5\u94FE\u8868\u5934\u63D2\u6CD5\u63D2\u5165\u3002</li></ul></li><li><p>\u5982\u679C\u8981\u63D2\u5165\u7684\u4F4D\u7F6E\u4E4B\u524D\u5DF2\u7ECF\u5B58\u5728\uFF0C\u66FF\u6362\u540E\u8FD4\u56DE\u65E7\u503C\uFF0C\u5426\u5219\u8FD4\u56DE null.</p></li></ul></li></ul></li></ul><p>\u6211\u4EEC\u518D\u770B\u5230\u7B2C\u4E00\u6B65\u4E2D\u7684<code>scanAndLockForPut</code>\u64CD\u4F5C\uFF0C\u5B83\u7684\u542B\u4E49\u662F\u83B7\u53D6\u5199\u5165\u9501\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">scanAndLockForPut</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> <span class="token function">entryForHash</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> first<span class="token punctuation">;</span>
    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> retries <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// negative while locating node</span>

    <span class="token comment">// \u5FAA\u73AF\u83B7\u53D6\u9501</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">;</span> <span class="token comment">// to recheck first below</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>retries <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// speculatively create node</span>
                    <span class="token comment">// \u8FDB\u5230\u8FD9\u91CC\u8BF4\u660E\u6570\u7EC4\u8BE5\u4F4D\u7F6E\u7684\u94FE\u8868\u662F\u7A7A\u7684\uFF0C\u6CA1\u6709\u4EFB\u4F55\u5143\u7D20</span>
                    <span class="token comment">// \u5F53\u7136\uFF0C\u8FDB\u5230\u8FD9\u91CC\u7684\u53E6\u4E00\u4E2A\u539F\u56E0\u662F tryLock() \u5931\u8D25\uFF0C\u6240\u4EE5\u8BE5\u69FD\u5B58\u5728\u5E76\u53D1\uFF0C\u4E0D\u4E00\u5B9A\u662F\u8BE5\u4F4D\u7F6E</span>
                    node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                retries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
                retries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                <span class="token comment">// \u987A\u7740\u94FE\u8868\u5F80\u4E0B\u8D70</span>
                e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u91CD\u8BD5\u6B21\u6570\u5982\u679C\u8D85\u8FC7 MAX_SCAN_RETRIES(\u5355\u68381\u591A\u683864)\uFF0C\u90A3\u4E48\u4E0D\u62A2\u4E86\uFF0C\u8FDB\u5165\u5230\u963B\u585E\u961F\u5217\u7B49\u5F85\u9501</span>
        <span class="token comment">//    lock() \u662F\u963B\u585E\u65B9\u6CD5\uFF0C\u76F4\u5230\u83B7\u53D6\u9501\u540E\u8FD4\u56DE</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>retries <span class="token operator">&gt;</span> <span class="token constant">MAX_SCAN_RETRIES</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>retries <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
                 <span class="token comment">// \u8FD9\u4E2A\u65F6\u5019\u662F\u6709\u5927\u95EE\u9898\u4E86\uFF0C\u90A3\u5C31\u662F\u6709\u65B0\u7684\u5143\u7D20\u8FDB\u5230\u4E86\u94FE\u8868\uFF0C\u6210\u4E3A\u4E86\u65B0\u7684\u8868\u5934</span>
                 <span class="token comment">//     \u6240\u4EE5\u8FD9\u8FB9\u7684\u7B56\u7565\u662F\uFF0C\u76F8\u5F53\u4E8E\u91CD\u65B0\u8D70\u4E00\u904D\u8FD9\u4E2A scanAndLockForPut \u65B9\u6CD5</span>
                 <span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">entryForHash</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e <span class="token operator">=</span> first <span class="token operator">=</span> f<span class="token punctuation">;</span> <span class="token comment">// re-traverse if entry changed</span>
            retries <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>\u8FD9\u4E2A\u65B9\u6CD5\u505A\u7684\u64CD\u4F5C\u5C31\u662F\u4E0D\u65AD\u7684\u81EA\u65CB <code>tryLock()</code> \u83B7\u53D6\u9501\u3002</p><p>\u5F53\u81EA\u65CB\u6B21\u6570\u5927\u4E8E\u6307\u5B9A\u6B21\u6570\u65F6\uFF0C\u4F7F\u7528 <code>lock()</code> \u963B\u585E\u83B7\u53D6\u9501\u3002</p><p>\u5728\u81EA\u65CB\u65F6\u987A\u4FBF\u83B7\u53D6\u4E0B hash \u4F4D\u7F6E\u7684 <code>HashEntry</code>\u3002</p><p>\u5230\u6B64JDK1.7\u7684<code>put</code>\u65B9\u6CD5\u6211\u4EEC\u5C31\u5206\u6790\u5B8C\u6BD5\u4E86\u3002</p></li></ul><ul><li><blockquote><p>JDK1.8</p></blockquote><p><code>put</code>\u65B9\u6CD5\u6E90\u7801\u5982\u4E0B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** Implementation for put and putIfAbsent */</span>
<span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// key \u548C value \u4E0D\u80FD\u4E3A\u7A7A</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// f = \u76EE\u6807\u4F4D\u7F6E\u5143\u7D20</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span><span class="token comment">// fh \u540E\u9762\u5B58\u653E\u76EE\u6807\u4F4D\u7F6E\u7684\u5143\u7D20 hash \u503C</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token comment">// \u6570\u7EC4\u6876\u4E3A\u7A7A\uFF0C\u521D\u59CB\u5316\u6570\u7EC4\u6876\uFF08\u81EA\u65CB+CAS)</span>
            tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u6876\u5185\u4E3A\u7A7A\uFF0CCAS \u653E\u5165\uFF0C\u4E0D\u52A0\u9501\uFF0C\u6210\u529F\u4E86\u5C31\u76F4\u63A5 break \u8DF3\u51FA</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// no lock when adding to empty bin</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span>
            tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">V</span> oldVal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token comment">// \u4F7F\u7528 synchronized \u52A0\u9501\u52A0\u5165\u8282\u70B9</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u8BF4\u660E\u662F\u94FE\u8868</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                        <span class="token comment">// \u5FAA\u73AF\u52A0\u5165\u65B0\u7684\u6216\u8005\u8986\u76D6\u8282\u70B9</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">K</span> ek<span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>
                                 <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>
                                    e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>
                                                          value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// \u7EA2\u9ED1\u6811</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span>
                        binCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>
                                                       value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            oldVal <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>
                                p<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span><span class="token punctuation">)</span>
                    <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div><ul><li>\u6839\u636E key \u8BA1\u7B97\u51FA hashcode \u3002</li><li>\u5224\u65AD\u662F\u5426\u9700\u8981\u8FDB\u884C\u521D\u59CB\u5316\u3002</li><li>\u5373\u4E3A\u5F53\u524D key \u5B9A\u4F4D\u51FA\u7684 Node\uFF0C\u5982\u679C\u4E3A\u7A7A\u8868\u793A\u5F53\u524D\u4F4D\u7F6E\u53EF\u4EE5\u5199\u5165\u6570\u636E\uFF0C\u5229\u7528 <code>CAS</code> \u5C1D\u8BD5\u5199\u5165\uFF0C\u5931\u8D25\u5219\u81EA\u65CB\u4FDD\u8BC1\u6210\u529F\u3002</li><li>\u5982\u679C\u5F53\u524D\u4F4D\u7F6E\u7684 <code>hashcode == MOVED == -1</code>,\u5219\u9700\u8981\u8FDB\u884C\u6269\u5BB9\u3002</li><li>\u5982\u679C\u90FD\u4E0D\u6EE1\u8DB3\uFF0C\u5219\u5229\u7528 <code>synchronized</code> \u9501\u5199\u5165\u6570\u636E\u3002</li><li>\u5982\u679C\u6570\u91CF\u5927\u4E8E <code>TREEIFY_THRESHOLD==8</code> \u5219\u8981\u6267\u884C\u6811\u5316\u65B9\u6CD5\uFF0C\u5728 <code>treeifyBin</code> \u4E2D\u4F1A\u9996\u5148\u5224\u65AD\u5F53\u524D\u6570\u7EC4\u957F\u5EA6\u226564\u65F6\u624D\u4F1A\u5C06\u94FE\u8868\u8F6C\u6362\u4E3A\u7EA2\u9ED1\u6811\u3002</li></ul></li></ul><h2 id="get-\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#get-\u65B9\u6CD5" aria-hidden="true">#</a> get \u65B9\u6CD5</h2><ul><li><blockquote><p>JDK1.7</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> s<span class="token punctuation">;</span> <span class="token comment">// manually integrate access methods to reduce overhead</span>
    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span>
    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> u <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> segmentShift<span class="token punctuation">)</span> <span class="token operator">&amp;</span> segmentMask<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">SSHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">SBASE</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8BA1\u7B97\u5F97\u5230 key \u7684\u5B58\u653E\u4F4D\u7F6E</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>segments<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>tab <span class="token operator">=</span> s<span class="token punctuation">.</span>table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token constant">UNSAFE</span><span class="token punctuation">.</span>getObjectVolatile
                 <span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tab<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">TSHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">TBASE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5982\u679C\u662F\u94FE\u8868\uFF0C\u904D\u5386\u67E5\u627E\u5230\u76F8\u540C key \u7684 value\u3002</span>
            <span class="token class-name">K</span> k<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li>\u8BA1\u7B97\u5F97\u5230 key \u7684\u5B58\u653E\u4F4D\u7F6E\u3002</li><li>\u904D\u5386\u6307\u5B9A\u4F4D\u7F6E\u67E5\u627E\u76F8\u540C key \u7684 value \u503C\u3002</li></ul></li></ul><ul><li><blockquote><p>JDK1.8</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">,</span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> eh<span class="token punctuation">;</span> <span class="token class-name">K</span> ek<span class="token punctuation">;</span>
    <span class="token comment">// key \u6240\u5728\u7684 hash \u4F4D\u7F6E</span>
    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5982\u679C\u6307\u5B9A\u4F4D\u7F6E\u5143\u7D20\u5B58\u5728\uFF0C\u5934\u7ED3\u70B9hash\u503C\u76F8\u540C</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eh <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// key hash \u503C\u76F8\u7B49\uFF0Ckey\u503C\u76F8\u540C\uFF0C\u76F4\u63A5\u8FD4\u56DE\u5143\u7D20 value</span>
                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eh <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token comment">// \u5934\u7ED3\u70B9hash\u503C\u5C0F\u4E8E0\uFF0C\u8BF4\u660E\u6B63\u5728\u6269\u5BB9\u6216\u8005\u662F\u7EA2\u9ED1\u6811\uFF0Cfind\u67E5\u627E</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u662F\u94FE\u8868\uFF0C\u904D\u5386\u67E5\u627E</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><ul><li>\u6839\u636E hash \u503C\u8BA1\u7B97\u4F4D\u7F6E\u3002</li></ul><ul><li>\u67E5\u627E\u5230\u6307\u5B9A\u4F4D\u7F6E\uFF0C\u5982\u679C\u5934\u8282\u70B9\u5C31\u662F\u8981\u627E\u7684\uFF0C\u76F4\u63A5\u8FD4\u56DE\u5B83\u7684 value.</li></ul><ul><li>\u5982\u679C\u5934\u8282\u70B9 hash \u503C\u5C0F\u4E8E 0 \uFF0C\u8BF4\u660E\u6B63\u5728\u6269\u5BB9\u6216\u8005\u662F\u7EA2\u9ED1\u6811\uFF0C\u67E5\u627E\u4E4B\u3002</li></ul><ul><li>\u5982\u679C\u662F\u94FE\u8868\uFF0C\u904D\u5386\u67E5\u627E\u4E4B\u3002</li></ul></li></ul><h2 id="\u6269\u5BB9\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u6269\u5BB9\u65B9\u6CD5" aria-hidden="true">#</a> \u6269\u5BB9\u65B9\u6CD5</h2><h3 id="rehash-\u65B9\u6CD5-jdk1-7" tabindex="-1"><a class="header-anchor" href="#rehash-\u65B9\u6CD5-jdk1-7" aria-hidden="true">#</a> rehash \u65B9\u6CD5\uFF08JDK1.7\uFF09</h3><blockquote><p>\u53EA\u6709JDK1.7\u6709\u8FD9\u4E2A<code>rehash</code>\u65B9\u6CD5</p></blockquote><p>\u6211\u4EEC\u9996\u5148\u56DE\u987E\u4E00\u4E0B\u89E6\u53D1\u6269\u5BB9\u7684\u4F4D\u7F6E\uFF0C<code>put</code> \u7684\u65F6\u5019\uFF0C\u5982\u679C\u5224\u65AD\u8BE5\u503C\u7684\u63D2\u5165\u4F1A\u5BFC\u81F4\u8BE5 <code>segment</code> \u7684\u5143\u7D20\u4E2A\u6570\u8D85\u8FC7\u9608\u503C\uFF0C\u90A3\u4E48\u5148\u8FDB\u884C\u6269\u5BB9\uFF0C\u518D\u63D2\u503C\u3002</p><p>\u7136\u540E\u9700\u8981\u6CE8\u610F\u7684\u662F<code>segment</code>\u6570\u7EC4\u4E0D\u80FD\u6269\u5BB9\uFF0C\u6269\u5BB9\u662F <code>segment</code> \u6570\u7EC4\u67D0\u4E2A\u4F4D\u7F6E\u5185\u90E8\u7684\u6570\u7EC4 <code>HashEntry&lt;K,V&gt;[]</code> \u8FDB\u884C\u6269\u5BB9\uFF0C\u6269\u5BB9\u540E\uFF0C<strong>\u5BB9\u91CF\u4E3A\u539F\u6765\u7684 2 \u500D\u3002</strong></p><p>\u8001\u6570\u7EC4\u91CC\u7684\u6570\u636E\u79FB\u52A8\u5230\u65B0\u7684\u6570\u7EC4\u65F6\uFF0C\u4F4D\u7F6E\u8981\u4E48\u4E0D\u53D8\uFF0C\u8981\u4E48\u53D8\u4E3A <code>index+ oldSize</code>\uFF0C\u53C2\u6570\u91CC\u7684 node \u4F1A\u5728\u6269\u5BB9\u4E4B\u540E\u4F7F\u7528\u94FE\u8868<strong>\u5934\u63D2\u6CD5</strong>\u63D2\u5165\u5230\u6307\u5B9A\u4F4D\u7F6E\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>
    <span class="token comment">// \u8001\u5BB9\u91CF</span>
    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> oldTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// \u65B0\u5BB9\u91CF\uFF0C\u6269\u5927\u4E24\u500D</span>
    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// \u65B0\u7684\u6269\u5BB9\u9600\u503C </span>
    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>newCapacity <span class="token operator">*</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u521B\u5EFA\u65B0\u7684\u6570\u7EC4</span>
    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// \u65B0\u7684\u63A9\u7801\uFF0C\u9ED8\u8BA42\u6269\u5BB9\u540E\u662F4\uFF0C-1\u662F3\uFF0C\u4E8C\u8FDB\u5236\u5C31\u662F11\u3002</span>
    <span class="token keyword">int</span> sizeMask <span class="token operator">=</span> newCapacity <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldCapacity <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u904D\u5386\u8001\u6570\u7EC4</span>
        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> oldTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token comment">// \u8BA1\u7B97\u65B0\u7684\u4F4D\u7F6E\uFF0C\u65B0\u7684\u4F4D\u7F6E\u53EA\u53EF\u80FD\u662F\u4E0D\u4FBF\u6216\u8005\u662F\u8001\u7684\u4F4D\u7F6E+\u8001\u7684\u5BB9\u91CF\u3002</span>
            <span class="token keyword">int</span> idx <span class="token operator">=</span> e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>   <span class="token comment">//  Single node on list</span>
                <span class="token comment">// \u5982\u679C\u5F53\u524D\u4F4D\u7F6E\u8FD8\u4E0D\u662F\u94FE\u8868\uFF0C\u53EA\u662F\u4E00\u4E2A\u5143\u7D20\uFF0C\u76F4\u63A5\u8D4B\u503C</span>
                newTable<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// Reuse consecutive sequence at same slot</span>
                <span class="token comment">// \u5982\u679C\u662F\u94FE\u8868\u4E86</span>
                <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> lastRun <span class="token operator">=</span> e<span class="token punctuation">;</span>
                <span class="token keyword">int</span> lastIdx <span class="token operator">=</span> idx<span class="token punctuation">;</span>
                <span class="token comment">// \u65B0\u7684\u4F4D\u7F6E\u53EA\u53EF\u80FD\u662F\u4E0D\u4FBF\u6216\u8005\u662F\u8001\u7684\u4F4D\u7F6E+\u8001\u7684\u5BB9\u91CF\u3002</span>
                <span class="token comment">// \u904D\u5386\u7ED3\u675F\u540E\uFF0ClastRun \u540E\u9762\u7684\u5143\u7D20\u4F4D\u7F6E\u90FD\u662F\u76F8\u540C\u7684</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> last <span class="token operator">=</span> next<span class="token punctuation">;</span> last <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> last <span class="token operator">=</span> last<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> k <span class="token operator">=</span> last<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> lastIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        lastIdx <span class="token operator">=</span> k<span class="token punctuation">;</span>
                        lastRun <span class="token operator">=</span> last<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \uFF0ClastRun \u540E\u9762\u7684\u5143\u7D20\u4F4D\u7F6E\u90FD\u662F\u76F8\u540C\u7684\uFF0C\u76F4\u63A5\u4F5C\u4E3A\u94FE\u8868\u8D4B\u503C\u5230\u65B0\u4F4D\u7F6E\u3002</span>
                newTable<span class="token punctuation">[</span>lastIdx<span class="token punctuation">]</span> <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>
                <span class="token comment">// Clone remaining nodes</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> e<span class="token punctuation">;</span> p <span class="token operator">!=</span> lastRun<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u904D\u5386\u5269\u4F59\u5143\u7D20\uFF0C\u5934\u63D2\u6CD5\u5230\u6307\u5B9A k \u4F4D\u7F6E\u3002</span>
                    <span class="token class-name">V</span> v <span class="token operator">=</span> p<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                    <span class="token keyword">int</span> h <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>
                    <span class="token keyword">int</span> k <span class="token operator">=</span> h <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span>
                    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> n <span class="token operator">=</span> newTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    newTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> p<span class="token punctuation">.</span>key<span class="token punctuation">,</span> v<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5934\u63D2\u6CD5\u63D2\u5165\u65B0\u7684\u8282\u70B9</span>
    <span class="token keyword">int</span> nodeIndex <span class="token operator">=</span> node<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span> <span class="token comment">// add the new node</span>
    node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>newTable<span class="token punctuation">[</span>nodeIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newTable<span class="token punctuation">[</span>nodeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
    table <span class="token operator">=</span> newTable<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><p>\u5BF9\u4E8E\u6700\u540E\u7684\u4E24\u4E2A <code>for</code> \u5FAA\u73AF\u7684\u542B\u4E49\uFF1A</p><ul><li>\u7B2C\u4E00\u4E2A <code>for</code> \u662F\u4E3A\u4E86\u5BFB\u627E\u8FD9\u6837\u4E00\u4E2A\u8282\u70B9\uFF0C\u8FD9\u4E2A\u8282\u70B9\u540E\u9762\u7684\u6240\u6709 <code>next</code> \u8282\u70B9\u7684\u65B0\u4F4D\u7F6E\u90FD\u662F\u76F8\u540C\u7684\u3002\u7136\u540E\u628A\u8FD9\u4E2A\u4F5C\u4E3A\u4E00\u4E2A\u94FE\u8868\u8D4B\u503C\u5230\u65B0\u4F4D\u7F6E\u3002</li></ul><ul><li>\u7B2C\u4E8C\u4E2A <code>for</code> \u5FAA\u73AF\u662F\u4E3A\u4E86\u628A\u5269\u4F59\u7684\u5143\u7D20\u901A\u8FC7\u5934\u63D2\u6CD5\u63D2\u5165\u5230\u6307\u5B9A\u4F4D\u7F6E\u94FE\u8868\u3002</li></ul><h3 id="trypresize-\u65B9\u6CD5-jdk1-8" tabindex="-1"><a class="header-anchor" href="#trypresize-\u65B9\u6CD5-jdk1-8" aria-hidden="true">#</a> tryPresize \u65B9\u6CD5\uFF08JDK1.8\uFF09</h3><blockquote><p>\u53EA\u6709JDK1.8\u4E2D\u6709<code>tryPresize</code>\u65B9\u6CD5</p></blockquote><p>\u8FD9\u4E2A\u65B9\u6CD5\u8981\u770B\u61C2\u8FD8\u8981\u770B\u540E\u9762\u7684<code>transfer</code>\u65B9\u6CD5\u3002</p><p>\u8FD9\u91CC\u7684\u6269\u5BB9\u540E\u6570\u7EC4\u5BB9\u91CF\u662F\u539F\u6765\u76842\u500D\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u9996\u5148\u8981\u8BF4\u660E\u7684\u662F\uFF0C\u65B9\u6CD5\u53C2\u6570 size \u4F20\u8FDB\u6765\u7684\u65F6\u5019\u5C31\u5DF2\u7ECF\u7FFB\u4E86\u500D\u4E86</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">tryPresize</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// c: size \u7684 1.5 \u500D\uFF0C\u518D\u52A0 1\uFF0C\u518D\u5F80\u4E0A\u53D6\u6700\u8FD1\u7684 2 \u7684 n \u6B21\u65B9\u3002</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">:</span>
        <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sc<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>

        <span class="token comment">// \u8FD9\u4E2A if \u5206\u652F\u548C\u4E4B\u524D\u8BF4\u7684\u521D\u59CB\u5316\u6570\u7EC4\u7684\u4EE3\u7801\u57FA\u672C\u4E0A\u662F\u4E00\u6837\u7684\uFF0C\u5728\u8FD9\u91CC\uFF0C\u6211\u4EEC\u53EF\u4EE5\u4E0D\u7528\u7BA1\u8FD9\u5757\u4EE3\u7801</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">&gt;</span> c<span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> c<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> tab<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        table <span class="token operator">=</span> nt<span class="token punctuation">;</span>
                        sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.75 * n</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> sc <span class="token operator">||</span> n <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> table<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u6211\u6CA1\u770B\u61C2 rs \u7684\u771F\u6B63\u542B\u4E49\u662F\u4EC0\u4E48\uFF0C\u4E0D\u8FC7\u4E5F\u5173\u7CFB\u4E0D\u5927</span>
            <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>sc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">&gt;&gt;&gt;</span> <span class="token constant">RESIZE_STAMP_SHIFT</span><span class="token punctuation">)</span> <span class="token operator">!=</span> rs <span class="token operator">||</span> sc <span class="token operator">==</span> rs <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">||</span>
                    sc <span class="token operator">==</span> rs <span class="token operator">+</span> <span class="token constant">MAX_RESIZERS</span> <span class="token operator">||</span> <span class="token punctuation">(</span>nt <span class="token operator">=</span> nextTable<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>
                    transferIndex <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token comment">// 2. \u7528 CAS \u5C06 sizeCtl \u52A0 1\uFF0C\u7136\u540E\u6267\u884C transfer \u65B9\u6CD5</span>
                <span class="token comment">//    \u6B64\u65F6 nextTab \u4E0D\u4E3A null</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> sc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token function">transfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> nt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 1. \u5C06 sizeCtl \u8BBE\u7F6E\u4E3A (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2)</span>
            <span class="token comment">//     \u6211\u662F\u6CA1\u770B\u61C2\u8FD9\u4E2A\u503C\u771F\u6B63\u7684\u610F\u4E49\u662F\u4EC0\u4E48? \u4E0D\u8FC7\u53EF\u4EE5\u8BA1\u7B97\u51FA\u6765\u7684\u662F\uFF0C\u7ED3\u679C\u662F\u4E00\u4E2A\u6BD4\u8F83\u5927\u7684\u8D1F\u6570</span>
            <span class="token comment">//  \u8C03\u7528 transfer \u65B9\u6CD5\uFF0C\u6B64\u65F6 nextTab \u53C2\u6570\u4E3A null</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span>
                                         <span class="token punctuation">(</span>rs <span class="token operator">&lt;&lt;</span> <span class="token constant">RESIZE_STAMP_SHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token function">transfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p>\u8FD9\u4E2A\u65B9\u6CD5\u7684\u6838\u5FC3\u5728\u4E8E <code>sizeCtl</code> \u503C\u7684\u64CD\u4F5C\uFF0C\u9996\u5148\u5C06\u5176\u8BBE\u7F6E\u4E3A\u4E00\u4E2A\u8D1F\u6570</p><p>\u7136\u540E\u6267\u884C <code>transfer(tab, null)</code>\uFF0C\u518D\u4E0B\u4E00\u4E2A\u5FAA\u73AF\u5C06 <code>sizeCtl</code> \u52A0 1\uFF0C\u5E76\u6267\u884C <code>transfer(tab, nt)</code>\uFF0C\u4E4B\u540E\u53EF\u80FD\u662F\u7EE7\u7EED <code>sizeCtl</code> \u52A0 1\uFF0C\u5E76\u6267\u884C <code>transfer(tab, nt)</code>\u3002</p><p>\u6240\u4EE5\uFF0C\u53EF\u80FD\u7684\u64CD\u4F5C\u5C31\u662F\u6267\u884C 1 \u6B21 <code>transfer(tab, null)</code>+ \u591A\u6B21 <code>transfer(tab, nt)</code>\uFF0C\u8FD9\u91CC\u600E\u4E48\u7ED3\u675F\u5FAA\u73AF\u7684\u9700\u8981\u770B\u5B8C <code>transfer</code> \u6E90\u7801\u624D\u6E05\u695A\u3002</p><blockquote><p><code>transfer</code> \u6E90\u7801</p></blockquote><p>\u8FD9\u4E2A\u65B9\u6CD5\u5B8C\u6210\u7684\u5DE5\u4F5C\u662F\u300C\u6570\u636E\u8FC1\u79FB\u300D\u3002\u5C06\u539F\u6765\u7684 <code>tab</code> \u6570\u7EC4\u7684\u5143\u7D20\u8FC1\u79FB\u5230\u65B0\u7684 <code>nextTab</code> \u6570\u7EC4\u4E2D\u3002</p><p>\u8BE5\u65B9\u6CD5\u652F\u6301\u591A\u7EBF\u7A0B\u6267\u884C\uFF0C\u5916\u56F4\u8C03\u7528\u6B64\u65B9\u6CD5\u7684\u65F6\u5019\uFF0C\u4F1A\u4FDD\u8BC1\u7B2C\u4E00\u4E2A\u53D1\u8D77\u6570\u636E\u8FC1\u79FB\u7684\u7EBF\u7A0B\uFF0C<code>nextTab</code> \u53C2\u6570\u4E3A null\uFF0C\u4E4B\u540E\u518D\u8C03\u7528\u6B64\u65B9\u6CD5\u7684\u65F6\u5019\uFF0C<code>nextTab</code> \u4E0D\u4F1A\u4E3A null\u3002</p><p><code>transferIndex</code>\u914D\u5408\u6B65\u957F\uFF08<code>stride</code>\uFF09\u7528\u4E8E\u5B89\u6392\u54EA\u4E2A\u7EBF\u7A0B\u6267\u884C\u54EA\u51E0\u4E2A\u4EFB\u52A1\u3002</p><p>\u7B2C\u4E00\u4E2A\u53D1\u8D77\u6570\u636E\u8FC1\u79FB\u7684\u7EBF\u7A0B\u4F1A\u5C06 <code>transferIndex</code> \u6307\u5411\u539F\u6570\u7EC4\u6700\u540E\u7684\u4F4D\u7F6E\uFF0C\u7136\u540E\u4ECE\u540E\u5F80\u524D\u7684 <code>stride</code> \u4E2A\u4EFB\u52A1\u5C5E\u4E8E\u7B2C\u4E00\u4E2A\u7EBF\u7A0B</p><p>\u7136\u540E\u5C06 <code>transferIndex</code> \u6307\u5411\u65B0\u7684\u4F4D\u7F6E\uFF0C\u518D\u5F80\u524D\u7684 <code>stride</code> \u4E2A\u4EFB\u52A1\u5C5E\u4E8E\u7B2C\u4E8C\u4E2A\u7EBF\u7A0B\u3002</p><p>\u4F9D\u6B64\u7C7B\u63A8\u3002\u5F53\u7136\uFF0C\u8FD9\u91CC\u8BF4\u7684\u7B2C\u4E8C\u4E2A\u7EBF\u7A0B\u4E0D\u662F\u771F\u7684\u4E00\u5B9A\u6307\u4EE3\u4E86\u7B2C\u4E8C\u4E2A\u7EBF\u7A0B\uFF0C\u4E5F\u53EF\u4EE5\u662F\u540C\u4E00\u4E2A\u7EBF\u7A0B\u3002</p><p><strong>\u5176\u5B9E\u5C31\u662F\u5C06\u4E00\u4E2A\u5927\u7684\u8FC1\u79FB\u4EFB\u52A1\u5206\u4E3A\u4E86\u4E00\u4E2A\u4E2A\u4EFB\u52A1\u5305</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTab<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">,</span> stride<span class="token punctuation">;</span>

    <span class="token comment">// stride \u5728\u5355\u6838\u4E0B\u76F4\u63A5\u7B49\u4E8E n\uFF0C\u591A\u6838\u6A21\u5F0F\u4E0B\u4E3A (n&gt;&gt;&gt;3)/NCPU\uFF0C\u6700\u5C0F\u503C\u662F 16</span>
    <span class="token comment">// stride \u53EF\u4EE5\u7406\u89E3\u4E3A\u201D\u6B65\u957F\u201C\uFF0C\u6709 n \u4E2A\u4F4D\u7F6E\u662F\u9700\u8981\u8FDB\u884C\u8FC1\u79FB\u7684\uFF0C</span>
    <span class="token comment">//   \u5C06\u8FD9 n \u4E2A\u4EFB\u52A1\u5206\u4E3A\u591A\u4E2A\u4EFB\u52A1\u5305\uFF0C\u6BCF\u4E2A\u4EFB\u52A1\u5305\u6709 stride \u4E2A\u4EFB\u52A1</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stride <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">NCPU</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token constant">NCPU</span> <span class="token operator">:</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MIN_TRANSFER_STRIDE</span><span class="token punctuation">)</span>
        stride <span class="token operator">=</span> <span class="token constant">MIN_TRANSFER_STRIDE</span><span class="token punctuation">;</span> <span class="token comment">// subdivide range</span>

    <span class="token comment">// \u5982\u679C nextTab \u4E3A null\uFF0C\u5148\u8FDB\u884C\u4E00\u6B21\u521D\u59CB\u5316</span>
    <span class="token comment">//    \u524D\u9762\u6211\u4EEC\u8BF4\u4E86\uFF0C\u5916\u56F4\u4F1A\u4FDD\u8BC1\u7B2C\u4E00\u4E2A\u53D1\u8D77\u8FC1\u79FB\u7684\u7EBF\u7A0B\u8C03\u7528\u6B64\u65B9\u6CD5\u65F6\uFF0C\u53C2\u6570 nextTab \u4E3A null</span>
    <span class="token comment">//       \u4E4B\u540E\u53C2\u4E0E\u8FC1\u79FB\u7684\u7EBF\u7A0B\u8C03\u7528\u6B64\u65B9\u6CD5\u65F6\uFF0CnextTab \u4E0D\u4F1A\u4E3A null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5BB9\u91CF\u7FFB\u500D</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            nextTab <span class="token operator">=</span> nt<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// try to cope with OOME</span>
            sizeCtl <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// nextTable \u662F ConcurrentHashMap \u4E2D\u7684\u5C5E\u6027</span>
        nextTable <span class="token operator">=</span> nextTab<span class="token punctuation">;</span>
        <span class="token comment">// transferIndex \u4E5F\u662F ConcurrentHashMap \u7684\u5C5E\u6027\uFF0C\u7528\u4E8E\u63A7\u5236\u8FC1\u79FB\u7684\u4F4D\u7F6E</span>
        transferIndex <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> nextn <span class="token operator">=</span> nextTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

    <span class="token comment">// ForwardingNode \u7FFB\u8BD1\u8FC7\u6765\u5C31\u662F\u6B63\u5728\u88AB\u8FC1\u79FB\u7684 Node</span>
    <span class="token comment">// \u8FD9\u4E2A\u6784\u9020\u65B9\u6CD5\u4F1A\u751F\u6210\u4E00\u4E2ANode\uFF0Ckey\u3001value \u548C next \u90FD\u4E3A null\uFF0C\u5173\u952E\u662F hash \u4E3A MOVED</span>
    <span class="token comment">// \u540E\u9762\u6211\u4EEC\u4F1A\u770B\u5230\uFF0C\u539F\u6570\u7EC4\u4E2D\u4F4D\u7F6E i \u5904\u7684\u8282\u70B9\u5B8C\u6210\u8FC1\u79FB\u5DE5\u4F5C\u540E\uFF0C</span>
    <span class="token comment">//    \u5C31\u4F1A\u5C06\u4F4D\u7F6E i \u5904\u8BBE\u7F6E\u4E3A\u8FD9\u4E2A ForwardingNode\uFF0C\u7528\u6765\u544A\u8BC9\u5176\u4ED6\u7EBF\u7A0B\u8BE5\u4F4D\u7F6E\u5DF2\u7ECF\u5904\u7406\u8FC7\u4E86</span>
    <span class="token comment">//    \u6240\u4EE5\u5B83\u5176\u5B9E\u76F8\u5F53\u4E8E\u662F\u4E00\u4E2A\u6807\u5FD7\u3002</span>
    <span class="token class-name">ForwardingNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> fwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForwardingNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>nextTab<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// advance \u6307\u7684\u662F\u505A\u5B8C\u4E86\u4E00\u4E2A\u4F4D\u7F6E\u7684\u8FC1\u79FB\u5DE5\u4F5C\uFF0C\u53EF\u4EE5\u51C6\u5907\u505A\u4E0B\u4E00\u4E2A\u4F4D\u7F6E\u7684\u4E86</span>
    <span class="token keyword">boolean</span> advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> finishing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// to ensure sweep before committing nextTab</span>

    <span class="token comment">/*
     * \u4E0B\u9762\u8FD9\u4E2A for \u5FAA\u73AF\uFF0C\u6700\u96BE\u7406\u89E3\u7684\u5728\u524D\u9762\uFF0C\u800C\u8981\u770B\u61C2\u5B83\u4EEC\uFF0C\u5E94\u8BE5\u5148\u770B\u61C2\u540E\u9762\u7684\uFF0C\u7136\u540E\u518D\u5012\u56DE\u6765\u770B
     */</span>

    <span class="token comment">// i \u662F\u4F4D\u7F6E\u7D22\u5F15\uFF0Cbound \u662F\u8FB9\u754C\uFF0C\u6CE8\u610F\u662F\u4ECE\u540E\u5F80\u524D</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> fh<span class="token punctuation">;</span>

        <span class="token comment">// \u4E0B\u9762\u8FD9\u4E2A while \u771F\u7684\u662F\u4E0D\u597D\u7406\u89E3</span>
        <span class="token comment">// advance \u4E3A true \u8868\u793A\u53EF\u4EE5\u8FDB\u884C\u4E0B\u4E00\u4E2A\u4F4D\u7F6E\u7684\u8FC1\u79FB\u4E86</span>
        <span class="token comment">//   \u7B80\u5355\u7406\u89E3\u7ED3\u5C40: i \u6307\u5411\u4E86 transferIndex\uFF0Cbound \u6307\u5411\u4E86 transferIndex-stride</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>advance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> nextIndex<span class="token punctuation">,</span> nextBound<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>i <span class="token operator">&gt;=</span> bound <span class="token operator">||</span> finishing<span class="token punctuation">)</span>
                advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

            <span class="token comment">// \u5C06 transferIndex \u503C\u8D4B\u7ED9 nextIndex</span>
            <span class="token comment">// \u8FD9\u91CC transferIndex \u4E00\u65E6\u5C0F\u4E8E\u7B49\u4E8E 0\uFF0C\u8BF4\u660E\u539F\u6570\u7EC4\u7684\u6240\u6709\u4F4D\u7F6E\u90FD\u6709\u76F8\u5E94\u7684\u7EBF\u7A0B\u53BB\u5904\u7406\u4E86</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nextIndex <span class="token operator">=</span> transferIndex<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span>compareAndSwapInt
                     <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">TRANSFERINDEX</span><span class="token punctuation">,</span> nextIndex<span class="token punctuation">,</span>
                      nextBound <span class="token operator">=</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">&gt;</span> stride <span class="token operator">?</span>
                                   nextIndex <span class="token operator">-</span> stride <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u770B\u62EC\u53F7\u4E2D\u7684\u4EE3\u7801\uFF0CnextBound \u662F\u8FD9\u6B21\u8FC1\u79FB\u4EFB\u52A1\u7684\u8FB9\u754C\uFF0C\u6CE8\u610F\uFF0C\u662F\u4ECE\u540E\u5F80\u524D</span>
                bound <span class="token operator">=</span> nextBound<span class="token punctuation">;</span>
                i <span class="token operator">=</span> nextIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> n <span class="token operator">||</span> i <span class="token operator">+</span> n <span class="token operator">&gt;=</span> nextn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> sc<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>finishing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u6240\u6709\u7684\u8FC1\u79FB\u64CD\u4F5C\u5DF2\u7ECF\u5B8C\u6210</span>
                nextTable <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token comment">// \u5C06\u65B0\u7684 nextTab \u8D4B\u503C\u7ED9 table \u5C5E\u6027\uFF0C\u5B8C\u6210\u8FC1\u79FB</span>
                table <span class="token operator">=</span> nextTab<span class="token punctuation">;</span>
                <span class="token comment">// \u91CD\u65B0\u8BA1\u7B97 sizeCtl: n \u662F\u539F\u6570\u7EC4\u957F\u5EA6\uFF0C\u6240\u4EE5 sizeCtl \u5F97\u51FA\u7684\u503C\u5C06\u662F\u65B0\u6570\u7EC4\u957F\u5EA6\u7684 0.75 \u500D</span>
                sizeCtl <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// \u4E4B\u524D\u6211\u4EEC\u8BF4\u8FC7\uFF0CsizeCtl \u5728\u8FC1\u79FB\u524D\u4F1A\u8BBE\u7F6E\u4E3A (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2</span>
            <span class="token comment">// \u7136\u540E\uFF0C\u6BCF\u6709\u4E00\u4E2A\u7EBF\u7A0B\u53C2\u4E0E\u8FC1\u79FB\u5C31\u4F1A\u5C06 sizeCtl \u52A0 1\uFF0C</span>
            <span class="token comment">// \u8FD9\u91CC\u4F7F\u7528 CAS \u64CD\u4F5C\u5BF9 sizeCtl \u8FDB\u884C\u51CF 1\uFF0C\u4EE3\u8868\u505A\u5B8C\u4E86\u5C5E\u4E8E\u81EA\u5DF1\u7684\u4EFB\u52A1</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">,</span> sc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u4EFB\u52A1\u7ED3\u675F\uFF0C\u65B9\u6CD5\u9000\u51FA</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">RESIZE_STAMP_SHIFT</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>

                <span class="token comment">// \u5230\u8FD9\u91CC\uFF0C\u8BF4\u660E (sc - 2) == resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT\uFF0C</span>
                <span class="token comment">// \u4E5F\u5C31\u662F\u8BF4\uFF0C\u6240\u6709\u7684\u8FC1\u79FB\u4EFB\u52A1\u90FD\u505A\u5B8C\u4E86\uFF0C\u4E5F\u5C31\u4F1A\u8FDB\u5165\u5230\u4E0A\u9762\u7684 if(finishing){} \u5206\u652F\u4E86</span>
                finishing <span class="token operator">=</span> advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                i <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">// recheck before commit</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u5982\u679C\u4F4D\u7F6E i \u5904\u662F\u7A7A\u7684\uFF0C\u6CA1\u6709\u4EFB\u4F55\u8282\u70B9\uFF0C\u90A3\u4E48\u653E\u5165\u521A\u521A\u521D\u59CB\u5316\u7684 ForwardingNode \u201D\u7A7A\u8282\u70B9\u201C</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            advance <span class="token operator">=</span> <span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8BE5\u4F4D\u7F6E\u5904\u662F\u4E00\u4E2A ForwardingNode\uFF0C\u4EE3\u8868\u8BE5\u4F4D\u7F6E\u5DF2\u7ECF\u8FC1\u79FB\u8FC7\u4E86</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span>
            advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// already processed</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5BF9\u6570\u7EC4\u8BE5\u4F4D\u7F6E\u5904\u7684\u7ED3\u70B9\u52A0\u9501\uFF0C\u5F00\u59CB\u5904\u7406\u6570\u7EC4\u8BE5\u4F4D\u7F6E\u5904\u7684\u8FC1\u79FB\u5DE5\u4F5C</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> ln<span class="token punctuation">,</span> hn<span class="token punctuation">;</span>
                    <span class="token comment">// \u5934\u8282\u70B9\u7684 hash \u5927\u4E8E 0\uFF0C\u8BF4\u660E\u662F\u94FE\u8868\u7684 Node \u8282\u70B9</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// \u4E0B\u9762\u8FD9\u4E00\u5757\u548C Java7 \u4E2D\u7684 ConcurrentHashMap \u8FC1\u79FB\u662F\u5DEE\u4E0D\u591A\u7684\uFF0C</span>
                        <span class="token comment">// \u9700\u8981\u5C06\u94FE\u8868\u4E00\u5206\u4E3A\u4E8C\uFF0C</span>
                        <span class="token comment">//   \u627E\u5230\u539F\u94FE\u8868\u4E2D\u7684 lastRun\uFF0C\u7136\u540E lastRun \u53CA\u5176\u4E4B\u540E\u7684\u8282\u70B9\u662F\u4E00\u8D77\u8FDB\u884C\u8FC1\u79FB\u7684</span>
                        <span class="token comment">//   lastRun \u4E4B\u524D\u7684\u8282\u70B9\u9700\u8981\u8FDB\u884C\u514B\u9686\uFF0C\u7136\u540E\u5206\u5230\u4E24\u4E2A\u94FE\u8868\u4E2D</span>
                        <span class="token keyword">int</span> runBit <span class="token operator">=</span> fh <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> lastRun <span class="token operator">=</span> f<span class="token punctuation">;</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">int</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> runBit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                runBit <span class="token operator">=</span> b<span class="token punctuation">;</span>
                                lastRun <span class="token operator">=</span> p<span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>runBit <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            ln <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>
                            hn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            hn <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>
                            ln <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> f<span class="token punctuation">;</span> p <span class="token operator">!=</span> lastRun<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">int</span> ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">;</span> <span class="token class-name">K</span> pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">;</span> <span class="token class-name">V</span> pv <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                                ln <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>ph<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> pv<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">else</span>
                                hn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>ph<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> pv<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token comment">// \u5176\u4E2D\u7684\u4E00\u4E2A\u94FE\u8868\u653E\u5728\u65B0\u6570\u7EC4\u7684\u4F4D\u7F6E i</span>
                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// \u53E6\u4E00\u4E2A\u94FE\u8868\u653E\u5728\u65B0\u6570\u7EC4\u7684\u4F4D\u7F6E i+n</span>
                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i <span class="token operator">+</span> n<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// \u5C06\u539F\u6570\u7EC4\u8BE5\u4F4D\u7F6E\u5904\u8BBE\u7F6E\u4E3A fwd\uFF0C\u4EE3\u8868\u8BE5\u4F4D\u7F6E\u5DF2\u7ECF\u5904\u7406\u5B8C\u6BD5\uFF0C</span>
                        <span class="token comment">//    \u5176\u4ED6\u7EBF\u7A0B\u4E00\u65E6\u770B\u5230\u8BE5\u4F4D\u7F6E\u7684 hash \u503C\u4E3A MOVED\uFF0C\u5C31\u4E0D\u4F1A\u8FDB\u884C\u8FC1\u79FB\u4E86</span>
                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// advance \u8BBE\u7F6E\u4E3A true\uFF0C\u4EE3\u8868\u8BE5\u4F4D\u7F6E\u5DF2\u7ECF\u8FC1\u79FB\u5B8C\u6BD5</span>
                        advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// \u7EA2\u9ED1\u6811\u7684\u8FC1\u79FB</span>
                        <span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>f<span class="token punctuation">;</span>
                        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> lo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hi <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        <span class="token keyword">int</span> lc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">int</span> h <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>
                            <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>
                                <span class="token punctuation">(</span>h<span class="token punctuation">,</span> e<span class="token punctuation">.</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span>val<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">=</span> loTail<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                    lo <span class="token operator">=</span> p<span class="token punctuation">;</span>
                                <span class="token keyword">else</span>
                                    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
                                loTail <span class="token operator">=</span> p<span class="token punctuation">;</span>
                                <span class="token operator">++</span>lc<span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">=</span> hiTail<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                    hi <span class="token operator">=</span> p<span class="token punctuation">;</span>
                                <span class="token keyword">else</span>
                                    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
                                hiTail <span class="token operator">=</span> p<span class="token punctuation">;</span>
                                <span class="token operator">++</span>hc<span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                        <span class="token comment">// \u5982\u679C\u4E00\u5206\u4E3A\u4E8C\u540E\uFF0C\u8282\u70B9\u6570\u5C0F\u4E8E\u7B49\u4E8E6\uFF0C\u90A3\u4E48\u5C06\u7EA2\u9ED1\u6811\u8F6C\u6362\u56DE\u94FE\u8868</span>
                        ln <span class="token operator">=</span> <span class="token punctuation">(</span>lc <span class="token operator">&lt;=</span> <span class="token constant">UNTREEIFY_THRESHOLD</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">untreeify</span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span> <span class="token operator">:</span>
                            <span class="token punctuation">(</span>hc <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span> <span class="token operator">:</span> t<span class="token punctuation">;</span>
                        hn <span class="token operator">=</span> <span class="token punctuation">(</span>hc <span class="token operator">&lt;=</span> <span class="token constant">UNTREEIFY_THRESHOLD</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">untreeify</span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span> <span class="token operator">:</span>
                            <span class="token punctuation">(</span>lc <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span> <span class="token operator">:</span> t<span class="token punctuation">;</span>

                        <span class="token comment">// \u5C06 ln \u653E\u7F6E\u5728\u65B0\u6570\u7EC4\u7684\u4F4D\u7F6E i</span>
                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// \u5C06 hn \u653E\u7F6E\u5728\u65B0\u6570\u7EC4\u7684\u4F4D\u7F6E i+n</span>
                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i <span class="token operator">+</span> n<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// \u5C06\u539F\u6570\u7EC4\u8BE5\u4F4D\u7F6E\u5904\u8BBE\u7F6E\u4E3A fwd\uFF0C\u4EE3\u8868\u8BE5\u4F4D\u7F6E\u5DF2\u7ECF\u5904\u7406\u5B8C\u6BD5\uFF0C</span>
                        <span class="token comment">//    \u5176\u4ED6\u7EBF\u7A0B\u4E00\u65E6\u770B\u5230\u8BE5\u4F4D\u7F6E\u7684 hash \u503C\u4E3A MOVED\uFF0C\u5C31\u4E0D\u4F1A\u8FDB\u884C\u8FC1\u79FB\u4E86</span>
                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// advance \u8BBE\u7F6E\u4E3A true\uFF0C\u4EE3\u8868\u8BE5\u4F4D\u7F6E\u5DF2\u7ECF\u8FC1\u79FB\u5B8C\u6BD5</span>
                        advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br></div></div><p>\u6240\u4EE5 <code>transfer</code> \u8FD9\u4E2A\u65B9\u6CD5\u5E76\u6CA1\u6709\u5B9E\u73B0\u6240\u6709\u7684\u8FC1\u79FB\u4EFB\u52A1\uFF0C\u6BCF\u6B21\u8C03\u7528\u8FD9\u4E2A\u65B9\u6CD5\u53EA\u5B9E\u73B0\u4E86 <code>transferIndex</code> \u5F80\u524D <code>stride</code> \u4E2A\u4F4D\u7F6E\u7684\u8FC1\u79FB\u5DE5\u4F5C\uFF0C\u5176\u4ED6\u7684\u9700\u8981\u7531\u5916\u56F4\u6765\u63A7\u5236\u3002</p><h2 id="treeifybin-\u6811\u5316-jdk1-8" tabindex="-1"><a class="header-anchor" href="#treeifybin-\u6811\u5316-jdk1-8" aria-hidden="true">#</a> treeifyBin \u6811\u5316\uFF08JDK1.8\uFF09</h2><blockquote><p>JDK1.8\u4E2D<code>ConcurrentHashMap</code>\u5F15\u5165\u4E86\u7EA2\u9ED1\u6811\uFF0C\u56E0\u6B64\u53EA\u6709JDK1.8\u6709\u8FD9\u4E2A\u65B9\u6CD5</p></blockquote><p>\u540C\u6837\u7684\u5728<code>put</code>\u65B9\u6CD5\u4E2D\u88AB\u89E6\u53D1\uFF0C\u5728\u540C\u4E00\u4E2A\u8282\u70B9\u7684\u4E2A\u6570\u8D85\u8FC78\u4E2A\u7684\u65F6\u5019\uFF0C\u4F1A\u8C03\u7528<code>treeifyBin</code>\u65B9\u6CD5\u3002</p><p><code>treeifyBin</code> \u4E0D\u4E00\u5B9A\u5C31\u4F1A\u8FDB\u884C\u7EA2\u9ED1\u6811\u8F6C\u6362\uFF0C\u4E5F\u53EF\u80FD\u662F\u4EC5\u4EC5\u505A\u6570\u7EC4\u6269\u5BB9\u3002</p><p>\u5F53\u6570\u7EC4\u957F\u5EA6\u5C0F\u4E8E64\u7684\u65F6\u5019\u4F1A\u4F18\u5148\u6269\u5145\u6570\u7EC4\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">treeifyBin</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> b<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> sc<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// MIN_TREEIFY_CAPACITY \u4E3A 64</span>
        <span class="token comment">// \u6240\u4EE5\uFF0C\u5982\u679C\u6570\u7EC4\u957F\u5EA6\u5C0F\u4E8E 64 \u7684\u65F6\u5019\uFF0C\u5176\u5B9E\u4E5F\u5C31\u662F 32 \u6216\u8005 16 \u6216\u8005\u66F4\u5C0F\u7684\u65F6\u5019\uFF0C\u4F1A\u8FDB\u884C\u6570\u7EC4\u6269\u5BB9</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MIN_TREEIFY_CAPACITY</span><span class="token punctuation">)</span>
            <span class="token comment">// \u540E\u9762\u6211\u4EEC\u518D\u8BE6\u7EC6\u5206\u6790\u8FD9\u4E2A\u65B9\u6CD5</span>
            <span class="token function">tryPresize</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// b \u662F\u5934\u8282\u70B9</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>hash <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u52A0\u9501</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u4E0B\u9762\u5C31\u662F\u904D\u5386\u94FE\u8868\uFF0C\u5EFA\u7ACB\u4E00\u9897\u7EA2\u9ED1\u6811</span>
                    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> tl <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> b<span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span>
                            <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> e<span class="token punctuation">.</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span>val<span class="token punctuation">,</span>
                                              <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">=</span> tl<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                            hd <span class="token operator">=</span> p<span class="token punctuation">;</span>
                        <span class="token keyword">else</span>
                            tl<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
                        tl <span class="token operator">=</span> p<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// \u5C06\u7EA2\u9ED1\u6811\u8BBE\u7F6E\u5230\u6570\u7EC4\u76F8\u5E94\u4F4D\u7F6E\u4E2D</span>
                    <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h1 id="\u5C0F\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u5C0F\u7ED3" aria-hidden="true">#</a> \u5C0F\u7ED3</h1><p>\u672C\u7BC7\u6211\u4EEC\u4ECE<code>HashMap</code>\u548C<code>HashTable</code>\u5B58\u5728\u7684\u95EE\u9898\u5F00\u59CB\uFF0C\u5206\u6790\u4E86<code>ConcurrentHashMap</code>\u8BBE\u8BA1\u7684\u5408\u7406\u6027\uFF0C\u5E76\u4E14\u8BE6\u7EC6\u5206\u6790\u4E86<code>ConcurrentHashMap</code>\u7684\u6E90\u7801\u3002</p><p>\u672C\u7BC7\u53C2\u8003\uFF1A</p><ul><li><a href="https://developer.aliyun.com/article/434486" target="_blank" rel="noopener noreferrer">https://developer.aliyun.com/article/434486</a></li><li><a href="https://pdai.tech/md/java/thread/java-thread-x-juc-collection-ConcurrentHashMap.html" target="_blank" rel="noopener noreferrer">https://pdai.tech/md/java/thread/java-thread-x-juc-collection-ConcurrentHashMap.html</a></li><li><a href="https://javaguide.cn/java/collection/concurrent-hash-map-source-code.html" target="_blank" rel="noopener noreferrer">https://javaguide.cn/java/collection/concurrent-hash-map-source-code.html</a></li><li><a href="https://juejin.cn/post/7070397572627562504" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7070397572627562504</a></li><li><a href="https://juejin.cn/post/6875651142958153741" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6875651142958153741</a></li><li><a href="https://www.cnblogs.com/zerotomax/p/8687425.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/zerotomax/p/8687425.html</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247484146&amp;idx=1&amp;sn=4aed1eab1106e0cc6aee09db84f275d7&amp;chksm=eb5387c4dc240ed22b87c0bd6f4aef0ccc653a49758317ec84545ae20871d10b8acd40475261&amp;scene=178&amp;cur_album_id=1771674622673911809#rd" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247484146&amp;idx=1&amp;sn=4aed1eab1106e0cc6aee09db84f275d7&amp;chksm=eb5387c4dc240ed22b87c0bd6f4aef0ccc653a49758317ec84545ae20871d10b8acd40475261&amp;scene=178&amp;cur_album_id=1771674622673911809#rd</a></li></ul>`,84);function t(e,o){return p}var l=n(a,[["render",t],["__file","index.html.vue"]]);export{l as default};
