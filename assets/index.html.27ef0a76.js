import{_ as n,c as s}from"./app.9fd9aa02.js";const a={},p=s(`<h1 id="\u7B80\u5355\u4ECB\u7ECD" tabindex="-1"><a class="header-anchor" href="#\u7B80\u5355\u4ECB\u7ECD" aria-hidden="true">#</a> \u7B80\u5355\u4ECB\u7ECD</h1><blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb3d485ac8c0415397de972af18318a0~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220910145310860.png"></p></blockquote><h2 id="\u4EC0\u4E48\u662F-hashmap" tabindex="-1"><a class="header-anchor" href="#\u4EC0\u4E48\u662F-hashmap" aria-hidden="true">#</a> \u4EC0\u4E48\u662F HashMap\uFF1F</h2><p>HashMap \u662FJava\u65E5\u5E38\u5F00\u53D1\u5E38\u7528\u7684\u4E00\u4E2A\u96C6\u5408\u7C7B\u3002Map\u96C6\u5408\u5373Key-Value\u7684\u96C6\u5408\uFF0C\u524D\u9762\u52A0\u4E2AHash\uFF0C\u5373\u6563\u5217\uFF0C\u65E0\u5E8F\u7684\u3002\u6240\u4EE5<strong>HashMap\u662F\u4E00\u4E2A\u7528\u4E8E\u5B58\u50A8Key-Value\u952E\u503C\u5BF9\u7684\u65E0\u5E8F\u96C6\u5408</strong>\uFF0C\u6BCF\u4E00\u4E2A\u952E\u503C\u5BF9\u4E5F\u53EB\u505A<code>Entry</code>\u3002</p><h2 id="hashmap-\u7684\u7279\u6027" tabindex="-1"><a class="header-anchor" href="#hashmap-\u7684\u7279\u6027" aria-hidden="true">#</a> HashMap \u7684\u7279\u6027</h2><blockquote><p>\u8FD9\u91CC\u6211\u4EEC\u5148\u505A\u56DE\u7B54\uFF0C\u89E3\u51B3\u51E0\u4E2A\u9762\u8BD5\u5E38\u95EE\u7684HashMap\u95EE\u9898\uFF0C\u501F\u6B64\u65B9\u5F0F\u6765\u521D\u6B65\u4E86\u89E3HashMap\u7684\u7279\u6027\u3002</p></blockquote><blockquote><p>HashMap\u7684\u5E95\u5C42\u662F\u600E\u4E48\u5B9E\u73B0\u7684\uFF1F&amp;&amp; HashMap\u7684\u6269\u5BB9\u673A\u5236\uFF1F</p></blockquote><p>\u5728JDK1.8\u4E4B\u524D\uFF0CHashMap\u91C7\u7528\u6570\u7EC4+\u94FE\u8868\u5B9E\u73B0\uFF0C\u5373\u4F7F\u7528<code>\u62C9\u94FE\u6CD5</code>\u89E3\u51B3hash\u51B2\u7A81\u3002\u4F46\u662F\u5F53\u4F4D\u4E8E\u4E00\u4E2A\u6876\u4E2D\u7684\u5143\u7D20\u8F83\u591A\uFF0C\u5373hash\u503C\u76F8\u7B49\u7684\u5143\u7D20\u8F83\u591A\u65F6\uFF0C\u901A\u8FC7key\u503C\u67E5\u627E\u8981\u904D\u5386\u94FE\u8868\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(N)\uFF0C\u6548\u7387\u8F83\u4F4E\u3002\u56E0\u6B64JDK1.8\u4E2D\uFF0CHashMap\u91C7\u7528\u6570\u7EC4+\u94FE\u8868+\u7EA2\u9ED1\u6811\u5B9E\u73B0\uFF0C\u5F53\u94FE\u8868\u957F\u5EA6\u8D85\u8FC7\u9608\u503C\uFF088\uFF09\u65F6\uFF0C\u5C06\u94FE\u8868\u8F6C\u6362\u4E3A\u7EA2\u9ED1\u6811\uFF08\u5C06\u94FE\u8868\u8F6C\u6362\u6210\u7EA2\u9ED1\u6811\u524D\u4F1A\u5224\u65AD\uFF0C\u5982\u679C\u5F53\u524D\u6570\u7EC4\u7684\u957F\u5EA6\u5C0F\u4E8E 64\uFF0C\u90A3\u4E48\u4F1A\u9009\u62E9\u5148\u8FDB\u884C\u6570\u7EC4\u6269\u5BB9\uFF0C\u800C\u4E0D\u662F\u8F6C\u6362\u4E3A\u7EA2\u9ED1\u6811\uFF09\uFF0C\u641C\u7D22\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(logN)\uFF0C\u8FD9\u6837\u5927\u5927\u51CF\u5C11\u4E86\u67E5\u627E\u65F6\u95F4\u3002</p><blockquote><p>\u4E3A\u4EC0\u4E48\u8BF4HashMap\u662F\u7EBF\u7A0B\u4E0D\u5B89\u5168\u7684\uFF1F</p></blockquote><p>HashMap\u5728put\u7684\u65F6\u5019\uFF0C\u63D2\u5165\u7684\u5143\u7D20\u8D85\u8FC7\u4E86\u5BB9\u91CF\uFF08\u7531\u8D1F\u8F7D\u56E0\u5B50\u51B3\u5B9A\uFF09\u7684\u8303\u56F4\u5C31\u4F1A\u89E6\u53D1\u6269\u5BB9\u64CD\u4F5C\uFF0C\u5C31\u662Frehash\uFF0C\u8FD9\u4E2A\u4F1A\u91CD\u65B0\u5C06\u539F\u6570\u7EC4\u7684\u5185\u5BB9\u91CD\u65B0hash\u5230\u65B0\u7684\u6269\u5BB9\u6570\u7EC4\u4E2D\uFF0C\u5728\u591A\u7EBF\u7A0B\u7684\u73AF\u5883\u4E0B\uFF0C\u5B58\u5728\u540C\u65F6\u5176\u4ED6\u7684\u5143\u7D20\u4E5F\u5728\u8FDB\u884Cput\u64CD\u4F5C\uFF0C\u5982\u679Chash\u503C\u76F8\u540C\uFF0C\u53EF\u80FD\u51FA\u73B0\u540C\u65F6\u5728\u540C\u4E00\u6570\u7EC4\u4E0B\u7528\u94FE\u8868\u8868\u793A\uFF0C\u9020\u6210\u95ED\u73AF\uFF0C\u5BFC\u81F4\u5728get\u65F6\u4F1A\u51FA\u73B0\u6B7B\u5FAA\u73AF\uFF0C\u6240\u4EE5HashMap\u662F\u7EBF\u7A0B\u4E0D\u5B89\u5168\u7684\u3002</p><blockquote><p>HashMap\u7684\u957F\u5EA6\u4E3A\u4EC0\u4E48\u662F2\u7684\u5E42\u6B21\u65B9\uFF1F</p></blockquote><p>\u4E3A\u4E86\u80FD\u8BA9 HashMap \u5B58\u53D6\u9AD8\u6548\uFF0C\u5C3D\u91CF\u8F83\u5C11\u78B0\u649E\uFF0C\u4E5F\u5C31\u662F\u8981\u5C3D\u91CF\u628A\u6570\u636E\u5206\u914D\u5747\u5300\u3002Hash \u503C\u7684\u8303\u56F4\u503C-2147483648 \u5230 2147483647\uFF0C\u524D\u540E\u52A0\u8D77\u6765\u5927\u6982 40 \u4EBF\u7684\u6620\u5C04\u7A7A\u95F4\uFF0C\u53EA\u8981\u54C8\u5E0C\u51FD\u6570\u6620\u5C04\u5F97\u6BD4\u8F83\u5747\u5300\u677E\u6563\uFF0C\u4E00\u822C\u5E94\u7528\u662F\u5F88\u96BE\u51FA\u73B0\u78B0\u649E\u7684\u3002\u4F46\u95EE\u9898\u662F\u4E00\u4E2A 40 \u4EBF\u957F\u5EA6\u7684\u6570\u7EC4\uFF0C\u5185\u5B58\u662F\u653E\u4E0D\u4E0B\u7684\u3002\u6240\u4EE5\u8FD9\u4E2A\u6563\u5217\u503C\u662F\u4E0D\u80FD\u76F4\u63A5\u62FF\u6765\u7528\u7684\u3002\u7528\u4E4B\u524D\u8FD8\u8981\u5148\u505A\u5BF9\u6570\u7EC4\u7684\u957F\u5EA6\u53D6\u6A21\u8FD0\u7B97\uFF0C\u5F97\u5230\u7684\u4F59\u6570\u624D\u80FD\u7528\u6765\u8981\u5B58\u653E\u7684\u4F4D\u7F6E\u4E5F\u5C31\u662F\u5BF9\u5E94\u7684\u6570\u7EC4\u4E0B\u6807\u3002\u8FD9\u4E2A\u6570\u7EC4\u4E0B\u6807\u7684\u8BA1\u7B97\u65B9\u6CD5\u662F\u201C <code>(n - 1) &amp; hash</code>\u201D\u3002\uFF08n \u4EE3\u8868\u6570\u7EC4\u957F\u5EA6\uFF09\u3002\u8FD9\u4E5F\u5C31\u89E3\u91CA\u4E86 HashMap \u7684\u957F\u5EA6\u4E3A\u4EC0\u4E48\u662F 2 \u7684\u5E42\u6B21\u65B9\u3002</p><blockquote><p>\u5176\u4ED6\u7684\u7279\u6027\uFF1F</p></blockquote><ul><li>HashMap \u5141\u8BB8 null \u952E\u548C null \u503C</li><li>HashMap \u9ED8\u8BA4\u7684\u521D\u59CB\u5316\u5927\u5C0F\u4E3A 16\u3002\u4E4B\u540E\u6BCF\u6B21\u6269\u5145\uFF0C\u5BB9\u91CF\u53D8\u4E3A\u539F\u6765\u7684 2 \u500D\u3002</li></ul><h1 id="hashmap-\u6E90\u7801\u5206\u6790" tabindex="-1"><a class="header-anchor" href="#hashmap-\u6E90\u7801\u5206\u6790" aria-hidden="true">#</a> HashMap \u6E90\u7801\u5206\u6790</h1><blockquote><p>\u8FD9\u91CC\u6211\u4EEC\u4E3B\u8981\u7684\u9605\u8BFB\u6750\u6599\u662FJDK1.8\u7684HashMap\u6E90\u7801</p></blockquote><h2 id="\u5E95\u5C42\u6570\u636E\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#\u5E95\u5C42\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a> \u5E95\u5C42\u6570\u636E\u7ED3\u6784</h2><blockquote><p>\u5728\u7F51\u4E0A\u627E\u5230\u4E00\u5F20\u5F88\u597D\u7684\u56FE</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ae6c879e93e4d42981415f3e992668b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>\u53EF\u4EE5\u8BF4HashMap\u5C31\u662F\u4E00\u4E2A\u6876\u6570\u7EC4\uFF0C\u5F53\u6876\u5185\u6570\u636E\u8D85\u8FC7\u516B\u4E2A\u4E4B\u540E\uFF0C\u6876\u5185\u5B58\u50A8\u7ED3\u6784\u4F1A\u7531\u94FE\u8868\u53D8\u6210\u7EA2\u9ED1\u6811\u3002</p><blockquote><p>\u5927\u4F53\u7ED3\u6784\u6211\u4EEC\u4E86\u89E3\u4E86\uFF0C\u63A5\u4E0B\u6765\u662F\u5177\u4F53\u7F16\u7801\u4E86</p></blockquote><blockquote><p>\u7C7B\u7684\u5C5E\u6027\uFF1A</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
     <span class="token comment">// \u5E8F\u5217\u53F7</span>
     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">362498820763181265L</span><span class="token punctuation">;</span>
     <span class="token comment">// \u9ED8\u8BA4\u7684\u521D\u59CB\u5BB9\u91CF\u662F16</span>
     <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
     <span class="token comment">// \u6700\u5927\u5BB9\u91CF</span>
     <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>
     <span class="token comment">// \u9ED8\u8BA4\u7684\u586B\u5145\u56E0\u5B50</span>
     <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>
     <span class="token comment">// \u5F53\u6876(bucket)\u4E0A\u7684\u7ED3\u70B9\u6570\u5927\u4E8E\u8FD9\u4E2A\u503C\u65F6\u4F1A\u8F6C\u6210\u7EA2\u9ED1\u6811</span>
     <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
     <span class="token comment">// \u5F53\u6876(bucket)\u4E0A\u7684\u7ED3\u70B9\u6570\u5C0F\u4E8E\u8FD9\u4E2A\u503C\u65F6\u6811\u8F6C\u94FE\u8868</span>
     <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">UNTREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
     <span class="token comment">// \u6876\u4E2D\u7ED3\u6784\u8F6C\u5316\u4E3A\u7EA2\u9ED1\u6811\u5BF9\u5E94\u7684table\u7684\u6700\u5C0F\u5BB9\u91CF</span>
     <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MIN_TREEIFY_CAPACITY</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
     <span class="token comment">// \u5B58\u50A8\u5143\u7D20\u7684\u6570\u7EC4\uFF0C\u603B\u662F2\u7684\u5E42\u6B21\u500D</span>
     <span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span>k<span class="token punctuation">,</span>v<span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>
     <span class="token comment">// \u5B58\u653E\u5177\u4F53\u5143\u7D20\u7684\u96C6</span>
     <span class="token keyword">transient</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span>map<span class="token punctuation">.</span>entry<span class="token punctuation">&lt;</span>k<span class="token punctuation">,</span>v<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entrySet<span class="token punctuation">;</span>
     <span class="token comment">// \u5B58\u653E\u5143\u7D20\u7684\u4E2A\u6570\uFF0C\u6CE8\u610F\u8FD9\u4E2A\u4E0D\u7B49\u4E8E\u6570\u7EC4\u7684\u957F\u5EA6\u3002</span>
     <span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>
     <span class="token comment">// \u6BCF\u6B21\u6269\u5BB9\u548C\u66F4\u6539map\u7ED3\u6784\u7684\u8BA1\u6570\u5668</span>
     <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span>
     <span class="token comment">// \u4E34\u754C\u503C(\u5BB9\u91CF*\u586B\u5145\u56E0\u5B50) \u5F53\u5B9E\u9645\u5927\u5C0F\u8D85\u8FC7\u4E34\u754C\u503C\u65F6\uFF0C\u4F1A\u8FDB\u884C\u6269\u5BB9</span>
     <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>
     <span class="token comment">// \u52A0\u8F7D\u56E0\u5B50</span>
     <span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><blockquote><p>HashMap\u5185\u90E8\u94FE\u8868\u8282\u70B9\u7C7B\u7684\u5B9E\u73B0\uFF1A</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
         <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>
         <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
         <span class="token class-name">V</span> value<span class="token punctuation">;</span>
         <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
 \u200B
         <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>
             <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
             <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
             <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span> <span class="token punctuation">}</span>
         <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>
         <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>
 \u200B
         <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token class-name">V</span> oldValue <span class="token operator">=</span> value<span class="token punctuation">;</span>
             value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
             <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
                 <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>
                 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                     <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
             <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><blockquote><p>HashMap\u5185\u90E8\u7EA2\u9ED1\u6811\u8282\u70B9\u7C7B\u578B\u7684\u5B9E\u73B0</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
         <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span>  <span class="token comment">// red-black tree links</span>
         <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> left<span class="token punctuation">;</span>
         <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> right<span class="token punctuation">;</span>
         <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>    <span class="token comment">// needed to unlink next upon deletion</span>
         <span class="token keyword">boolean</span> red<span class="token punctuation">;</span>
         <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> val<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token doc-comment comment">/**
          * Returns root of tree containing this node.
          */</span>
         <span class="token keyword">final</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> r <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> p<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> r<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                     <span class="token keyword">return</span> r<span class="token punctuation">;</span>
                 r <span class="token operator">=</span> p<span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token doc-comment comment">/**
          * Ensures that the given root is the first node of its bin.
          */</span>
         <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">moveRootToFront</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token doc-comment comment">/**
          * Finds the node starting at root p with the given hash and key.
          * The kc argument caches comparableClassFor(key) upon first use
          * comparing keys.
          */</span>
         <span class="token keyword">final</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token class-name">Object</span> k<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> kc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token doc-comment comment">/**
          * Calls find for root node.
          */</span>
         <span class="token keyword">final</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token class-name">Object</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token doc-comment comment">/**
          * Tie-breaking utility for ordering insertions when equal
          * hashCodes and non-comparable. We don&#39;t require a total
          * order, just a consistent insertion rule to maintain
          * equivalence across rebalancings. Tie-breaking further than
          * necessary simplifies testing a bit.
          */</span>
         <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">tieBreakOrder</span><span class="token punctuation">(</span><span class="token class-name">Object</span> a<span class="token punctuation">,</span> <span class="token class-name">Object</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token doc-comment comment">/**
          * Forms tree of the nodes linked from this node.
          */</span>
         <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">treeify</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token doc-comment comment">/**
          * Returns a list of non-TreeNodes replacing those linked from
          * this node.
          */</span>
         <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">untreeify</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token doc-comment comment">/**
          * Tree version of putVal.
          */</span>
         <span class="token keyword">final</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span>
                                        <span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token class-name">K</span> k<span class="token punctuation">,</span> <span class="token class-name">V</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token doc-comment comment">/**
          * Removes the given node, that must be present before this call.
          * This is messier than typical red-black deletion code because we
          * cannot swap the contents of an interior node with a leaf
          * successor that is pinned by &quot;next&quot; pointers that are accessible
          * independently during traversal. So instead we swap the tree
          * linkages. If the current tree appears to have too few nodes,
          * the bin is converted back to a plain bin. (The test triggers
          * somewhere between 2 and 6 nodes, depending on tree structure).
          */</span>
         <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">removeTreeNode</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span>
                                   <span class="token keyword">boolean</span> movable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token doc-comment comment">/**
          * Splits nodes in a tree bin into lower and upper tree bins,
          * or untreeifies if now too small. Called only from resize;
          * see above discussion about split bits and indices.
          *
          * @param map the map
          * @param tab the table for recording bin heads
          * @param index the index of the table being split
          * @param bit the bit of hash to split on
          */</span>
         <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> bit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token comment">/* ------------------------------------------------------------ */</span>
         <span class="token comment">// Red-black tree methods, all adapted from CLR</span>
 \u200B
         <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span>
                                               <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">rotateRight</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span>
                                                <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">balanceInsertion</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span>
                                                     <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">balanceDeletion</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span>
                                                    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
 \u200B
         <span class="token doc-comment comment">/**
          * Recursive invariant check
          */</span>
         <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">boolean</span> <span class="token function">checkInvariants</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br></div></div><h2 id="\u521D\u59CB\u5BB9\u91CF\u3001\u8D1F\u8F7D\u56E0\u5B50\u3001\u9608\u503C" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5BB9\u91CF\u3001\u8D1F\u8F7D\u56E0\u5B50\u3001\u9608\u503C" aria-hidden="true">#</a> \u521D\u59CB\u5BB9\u91CF\u3001\u8D1F\u8F7D\u56E0\u5B50\u3001\u9608\u503C</h2><p>\u4E00\u822C\u60C5\u51B5\u4E0B\u6211\u4EEC\u90FD\u4F1A\u4F7F\u7528\u65E0\u53C2\u6784\u9020 HashMap\u3002\u4F46\u5F53\u6211\u4EEC\u5BF9\u65F6\u95F4\u548C\u7A7A\u95F4\u590D\u6742\u8BFB\u6709\u8981\u6C42\u7684\u65F6\u5019\uFF0C\u6211\u4EEC\u9700\u8981\u624B\u52A8\u8C03\u53C2\uFF0C\u4EE5\u8BA9 HashMap \u6EE1\u8DB3\u6211\u4EEC\u7684\u8981\u6C42\u3002\u53EF\u4F9B\u6211\u4EEC\u8C03\u6574\u7684\u53C2\u6570\u6709\u4E24\u4E2A\uFF0C\u4E00\u4E2A\u662F\u521D\u59CB\u5BB9\u91CF <code>initialCapacity</code>\uFF0C\u53E6\u4E00\u4E2A\u8D1F\u8F7D\u56E0\u5B50 <code>loadFactor</code>\u3002\u8BBE\u5B9A\u8FD9\u4E24\u4E2A\u53C2\u6570\u4F1A\u5F71\u54CD\u5230\u9608\u503C\u7684\u5927\u5C0F\u3002\u521D\u59CB\u9608\u503C <code>threshold</code> \u7531 <code>initialCapacity</code> \u7ECF\u8FC7\u79FB\u4F4D\u64CD\u4F5C\u8BA1\u7B97\u5F97\u51FA\u3002\u4ED6\u4EEC\u7684\u4F5C\u7528\u5206\u522B\u5982\u4E0B\uFF1A</p><table><thead><tr><th>\u540D\u79F0</th><th>\u7528\u9014</th></tr></thead><tbody><tr><td>initialCapacity</td><td>HashMap \u521D\u59CB\u5BB9\u91CF</td></tr><tr><td>loadFactor</td><td>\u8D1F\u8F7D\u56E0\u5B50</td></tr><tr><td>threshold</td><td>\u9608\u503C\uFF08\u5F53\u524D HashMap \u6240\u80FD\u5BB9\u7EB3\u952E\u503C\u5BF9\u6570\u91CF\u7684\u6700\u5927\u503C\uFF0C\u8D85\u8FC7\u8FD9\u4E2A\u503C\uFF0C\u5219\u9700\u6269\u5BB9\uFF09</td></tr></tbody></table><p>\u76F8\u5173\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token doc-comment comment">/**
  * The default initial capacity - MUST be a power of two.
  */</span>
 <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// aka 16</span>
 \u200B
 <span class="token doc-comment comment">/**
 * The load factor used when none specified in constructor.
 */</span>
 <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>
 \u200B
 \u200B
 <span class="token doc-comment comment">/**
 * The next size value at which to resize (capacity * load factor).
 *
 * @serial
 */</span>
 <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>
 \u200B
 <span class="token doc-comment comment">/**
 * The load factor for the hash table.
 *
 * @serial
 */</span>
 <span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><blockquote><p>\u6211\u4EEC\u9996\u5148\u4ECE\u9608\u503C\uFF08threshold\uFF09\u5F00\u59CB\u5206\u6790</p></blockquote><p>\u901A\u8FC7\u770B\u4EE3\u7801\u6211\u4EEC\u77E5\u9053\u4E86HashMap\u521D\u59CB\u5BB9\u91CF\u662F16\uFF0C\u8D1F\u8F7D\u56E0\u5B50\u662F0.75\uFF0C\u800C\u9608\u503C\u6211\u4EEC\u4ECE\u6CE8\u91CA\u4E2D\u77E5\u9053\u662F\u7531\u5BB9\u91CF\u4E58\u4EE5\u8D1F\u8F7D\u56E0\u5B50\u8BA1\u7B97\u5F97\u6765\u7684\u3002</p><p>\u672C\u7740\u6C42\u5B9E\u7684\u6001\u5EA6\uFF0C\u6211\u4EEC\u67E5\u770B\u4E0BHashMap\u7684\u6784\u9020\u51FD\u6570\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal initial capacity: &quot;</span> <span class="token operator">+</span>
                                            initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span>
         initialCapacity <span class="token operator">=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>
         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal load factor: &quot;</span> <span class="token operator">+</span>
                                            loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>tableSizeFor\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
     n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
     n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
     n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
     n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
     n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u770B\u5230\u8FD9\u4E2AtableSizeFor\u65B9\u6CD5\uFF0C\u4F3C\u4E4E\u4E0E\u4E0A\u9762\u8BF4\u7684 threshold=capacity * load factor \u6709\u51FA\u5165\u3002</p><p>\u8FD9\u4E2A\u7B97\u6CD5\u7684\u4F5C\u7528\u5C31\u662F<strong>\u627E\u5230\u5927\u4E8E\u6216\u7B49\u4E8E cap \u7684\u6700\u5C0F2\u7684\u5E42</strong>\u3002\u8FC7\u7A0B\u5C31\u662F\u5C06\u4E8C\u8FDB\u5236\u6570\u4ECE\u5DE6\u5F80\u53F3\u6570\u7684\u7B2C\u4E00\u4E2A1\u5F00\u59CB\u53F3\u8FB9\u5168\u90E8\u53D8\u62101\uFF0C\u6700\u540E\u518D\u52A0\u4E0A1\uFF0C\u5C31\u662F\u7ED3\u679C\u4E86\u3002</p><p>\u6BD4\u5982\u6211\u4EEC\u4F20\u5165\u7684cap\u4E3A31\uFF0C\u89C2\u5BDFn\u7684\u53D8\u5316\u8FC7\u7A0B\uFF1A</p><p>1 1110(30) <code>-&gt;</code> 1 1111 <code>-&gt;</code> 10 0000(31 + 1) <code>-&gt;</code> 32</p><p>\u4E8B\u5B9E\u4E5F\u662F\u5982\u6B64\uFF1A</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab1f9a0a223445df8bfbfc7049151b4a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><blockquote><p>\u4EE5\u4E0A\u5C31\u662F\u521D\u59CB\u9608\u503C(threshold)\u7684\u8BA1\u7B97\u8FC7\u7A0B\u4E86\u3002\u63A5\u7740\u6211\u4EEC\u770B\u770B\u8D1F\u8F7D\u56E0\u5B50(loadFactor)\u3002</p></blockquote><p>\u5148\u95EE\u51E0\u4E2A\u95EE\u9898\uFF1A</p><ul><li><blockquote><p>\u4EC0\u4E48\u662F\u8D1F\u8F7D\u56E0\u5B50\uFF1F</p></blockquote><p>\u6839\u636E\u4E0A\u9762\u7684\u5B66\u4E60\u6211\u4EEC\u77E5\u9053<strong>\u9608\u503C\uFF08threshold\uFF09 = \u8D1F\u8F7D\u56E0\u5B50\uFF08loadFactor\uFF09 * \u5BB9\u91CF\uFF08capacity\uFF09</strong></p><p>loadFactor \u662F\u8D1F\u8F7D\u56E0\u5B50\uFF0C<strong>\u8868\u793A HashMap \u6EE1\u7684\u7A0B\u5EA6</strong>\uFF0C\u9ED8\u8BA4\u503C\u4E3A 0.75f\uFF0C\u4E5F\u5C31\u662F\u8BF4\u9ED8\u8BA4\u60C5\u51B5\u4E0B\uFF0C\u5F53 HashMap \u4E2D\u5143\u7D20\u4E2A\u6570\u8FBE\u5230\u4E86\u5BB9\u91CF\u7684 3/4 \u7684\u65F6\u5019\u5C31\u4F1A\u8FDB\u884C\u81EA\u52A8\u6269\u5BB9\u3002</p></li><li><blockquote><p>\u4E3A\u4EC0\u4E48\u8981\u6269\u5BB9\uFF1F</p></blockquote><p>HashMap \u5728\u6269\u5BB9\u5230\u8FC7\u7A0B\u4E2D\u4E0D\u4EC5\u8981\u5BF9\u5176\u5BB9\u91CF\u8FDB\u884C\u6269\u5145\uFF0C\u8FD8\u9700\u8981\u8FDB\u884C rehash\uFF01\u6240\u4EE5\uFF0C\u8FD9\u4E2A\u8FC7\u7A0B\u5176\u5B9E\u662F\u5F88\u8017\u65F6\u7684\uFF0C\u5E76\u4E14 Map \u4E2D\u5143\u7D20\u8D8A\u591A\u8D8A\u8017\u65F6\u3002</p><p>rehash \u7684\u8FC7\u7A0B\u76F8\u5F53\u4E8E\u5BF9\u5176\u4E2D\u6240\u6709\u7684\u5143\u7D20\u91CD\u65B0\u505A\u4E00\u904D hash\uFF0C\u91CD\u65B0\u8BA1\u7B97\u8981\u5206\u914D\u5230\u90A3\u4E2A\u6876\u4E2D\u3002</p><p><strong>\u90A3\u4E48\u4E3A\u4EC0\u4E48\u8981\u6269\u5BB9\uFF1FHashMap \u4E0D\u662F\u4E00\u4E2A\u6570\u7EC4\u94FE\u8868\u5417\uFF1F\u4E0D\u6269\u5BB9\u7684\u8BDD\uFF0C\u4E5F\u662F\u53EF\u4EE5\u65E0\u9650\u5B58\u50A8\u7684\u5440\u3002\u4E3A\u5565\u8981\u6269\u5BB9\uFF1F</strong></p><p>\u539F\u56E0\u5C31\u5728\u4E8E<strong>\u54C8\u5E0C\u78B0\u649E</strong>\uFF01</p><p><strong>\u54C8\u5E0C\u78B0\u649E</strong>\uFF1A\u4E24\u4E2A\u4E0D\u540C\u7684\u8F93\u5165\u503C\uFF0C\u6839\u636E\u540C\u4E00\u54C8\u5E0C\u51FD\u6570\u8BA1\u7B97\u51FA\u7684\u54C8\u5E0C\u503C\u76F8\u540C\u7684\u73B0\u8C61\u53EB\u505A\u78B0\u649E\u3002</p><p>\u4E3A\u4E86\u89E3\u51B3\u54C8\u5E0C\u51B2\u7A81\uFF0CHashMap\u4F7F\u7528\u4E86\u94FE\u5730\u5740\u6CD5\u3002</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc2549c68cbc4625b6a58255cb4ea565~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>HashMap\u662F\u57FA\u4E8E\u94FE\u8868\u7684\u6570\u7EC4\u7684\u6570\u636E\u7ED3\u6784\u5B9E\u73B0\u7684\u3002</p><p>\u6211\u4EEC\u77E5\u9053\u51B2\u7A81\u4EE5\u540E\u62C9\u94FE\u6CD5\u4F1A\u5411\u5BF9\u5E94\u94FE\u8868\u540E\u9762\u6DFB\u52A0\u5143\u7D20\uFF0C\u4E00\u65E6\u51B2\u7A81\u591A\u4E86\u6570\u7EC4\u7684\u94FE\u8868\u5C31\u4F1A\u9000\u5316\u6210\u94FE\u8868\uFF0C<strong>\u67E5\u627E\u6548\u7387\u5927\u5927\u964D\u4F4E</strong>\u3002</p><p>\u6240\u4EE5\u4E3A\u4E86\u4FDD\u8BC1HashMap\u7684\u67E5\u627E\u6548\u7387\uFF0C\u6211\u4EEC\u9700\u8981\u6269\u5BB9\uFF0C\u6765\u4FDD\u8BC1HashMap\u7684\u51B2\u7A81\u4E0D\u8981\u592A\u9AD8\u3002</p></li></ul><p>\u6240\u4EE5\u8D1F\u8F7D\u56E0\u5B50\u5B9E\u9645\u662F\u53CD\u5E94\u4E86 HashMap \u6876\u6570\u7EC4\u7684\u4F7F\u7528\u60C5\u51B5\uFF1A</p><ul><li><strong>\u8C03\u4F4E\u8D1F\u8F7D\u56E0\u5B50</strong>\uFF0CHashMap \u6240\u80FD\u5BB9\u7EB3\u7684\u952E\u503C\u5BF9\u6570\u91CF\u53D8\u5C11\u3002\u6269\u5BB9\u65F6\uFF0C\u91CD\u65B0\u5C06\u952E\u503C\u5BF9\u5B58\u50A8\u8FDB\u65B0\u7684\u6876\u6570\u7EC4\u91CC\uFF0C\u952E\u4E0E\u952E\u4E4B\u95F4\u4EA7\u751F\u7684\u78B0\u649E\u4F1A\u4E0B\u964D\uFF0C\u94FE\u8868\u957F\u5EA6\u53D8\u77ED\u3002\u6B64\u65F6\uFF0CHashMap \u7684CRUD\u64CD\u4F5C\u6548\u7387\u4F1A\u53D8\u9AD8\uFF0C\u8FD9\u5C31\u662F\u5178\u578B\u7684<strong>\u62FF\u7A7A\u95F4\u6362\u65F6\u95F4</strong>\u3002</li><li><strong>\u589E\u52A0\u8D1F\u8F7D\u56E0\u5B50</strong>\uFF08\u8D1F\u8F7D\u56E0\u5B50\u53EF\u4EE5\u5927\u4E8E1\uFF09\uFF0CHashMap\u6240\u80FD\u5BB9\u7EB3\u7684\u952E\u503C\u5BF9\u6570\u91CF\u53D8\u591A\uFF0C\u7A7A\u95F4\u5229\u7528\u7387\u9AD8\uFF0C\u4F46\u78B0\u649E\u7387\u4E5F\u9AD8\u3002\u8FD9\u610F\u5473\u7740\u94FE\u8868\u957F\u5EA6\u53D8\u957F\uFF0C\u6548\u7387\u4E5F\u968F\u4E4B\u964D\u4F4E\uFF0C\u8FD9\u79CD\u60C5\u51B5\u662F<strong>\u62FF\u65F6\u95F4\u6362\u7A7A\u95F4</strong>\u3002</li></ul><p>\u6B63\u5E38\u6765\u8BF4\u9ED8\u8BA4\u76840.75\u5C31\u5DF2\u7ECF\u662F\u5F88\u5408\u7406\u7684\u89E3\u4E86\uFF0C\u5982\u679C\u6709\u7279\u6B8A\u9700\u6C42\uFF0C\u53EF\u4EE5\u6309\u7167\u4E0A\u9762\u8BB2\u7684\u8FDB\u884C\u8C03\u6574\u3002</p><h2 id="hash\u65B9\u6CD5-\u6270\u52A8\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#hash\u65B9\u6CD5-\u6270\u52A8\u51FD\u6570" aria-hidden="true">#</a> hash\u65B9\u6CD5\uFF08\u6270\u52A8\u51FD\u6570\uFF09</h2><p>HashMap \u901A\u8FC7 key \u7684 hashCode \u7ECF\u8FC7\u6270\u52A8\u51FD\u6570\u5904\u7406\u8FC7\u540E\u5F97\u5230 hash \u503C\uFF0C\u7136\u540E\u901A\u8FC7<code>(n - 1) &amp; hash</code>\u5224\u65AD\u5F53\u524D\u5143\u7D20\u5B58\u653E\u7684\u4F4D\u7F6E\uFF08\u8FD9\u91CC\u7684n\u6307\u7684\u662F\u6570\u7EC4\u7684\u957F\u5EA6\uFF09\uFF0C\u5982\u679C\u5F53\u524D\u4F4D\u7F6E\u5B58\u5728\u5143\u7D20\u7684\u8BDD\uFF0C\u5C31\u5224\u65AD\u8BE5\u5143\u7D20\u4E0E\u8981\u5B58\u5165\u7684\u5143\u7D20\u7684 hash \u503C\u4EE5\u53CA key \u662F\u5426\u76F8\u540C\uFF0C\u5982\u679C\u76F8\u540C\u7684\u8BDD\uFF0C\u76F4\u63A5\u8986\u76D6\uFF0C\u4E0D\u76F8\u540C\u5C31\u901A\u8FC7\u62C9\u94FE\u6CD5\u89E3\u51B3\u51B2\u7A81\u3002</p><blockquote><p>jdk1.8 \u7684 hash \u65B9\u6CD5</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">int</span> h<span class="token punctuation">;</span>
     <span class="token comment">// key.hashCode()\uFF1A\u8FD4\u56DE\u6563\u5217\u503C\u4E5F\u5C31\u662Fhashcode</span>
     <span class="token comment">// ^ \uFF1A\u6309\u4F4D\u5F02\u6216</span>
     <span class="token comment">// &gt;&gt;&gt;:\u65E0\u7B26\u53F7\u53F3\u79FB\uFF0C\u5FFD\u7565\u7B26\u53F7\u4F4D\uFF0C\u7A7A\u4F4D\u90FD\u4EE50\u8865\u9F50</span>
     <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><p>\u89E3\u91CA</p><blockquote><p>key.hashCode()\u662FKeyt\u81EA\u5E26\u7684hashCode()\u65B9\u6CD5\uFF0C\u8FD4\u56DE\u4E00\u4E2Aint\u7684\u6563\u5217\u503C\uFF0C\u8303\u56F4\u4ECE-2147483648\u52302147483648\u3002\u4F46\u662F\u8FD9\u6837\u7684\u6563\u5217\u503C\u662F\u4E0D\u80FD\u76F4\u63A5\u62FF\u6765\u7528\u7684\uFF0C\u7528\u4E4B\u524D\u9700\u8981\u5BF9\u6570\u7EC4\u7684\u957F\u5EA6\u505A\u53D6\u6A21\u8FD0\u7B97\u3002\u5F97\u5230\u7684\u4F59\u6570\u624D\u662F\u7D22\u5F15\u503C\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> int index = hash &amp; (arrays.length-1);
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u90A3\u4E48\u8FD9\u4E5F\u5C31\u660E\u767D\u4E86\u4E3A\u4EC0\u4E48HashMap\u7684\u6570\u7EC4\u957F\u5EA6\u662F2\u7684\u6574\u6570\u5E42\u3002</p><p>\u6BD4\u5982\u4EE5\u521D\u59CB\u957F\u5EA6\u4E3A16\u4E3A\u4F8B\uFF0C16-1 = 15\uFF0C15\u7684\u4E8C\u8FDB\u5236\u6570\u4F4D00000000 00000000 00001111\u3002\u53EF\u4EE5\u770B\u51FA\u4E00\u4E2A\u5947\u6570\u4E8C\u8FDB\u5236\u6700\u540E\u4E00\u4F4D\u5FC5\u7136\u4F4D1\uFF0C\u5F53\u4E0E\u4E00\u4E2Ahash\u503C\u8FDB\u884C\u4E0E\u8FD0\u7B97\u65F6\uFF0C<strong>\u6700\u540E\u4E00\u4F4D\u53EF\u80FD\u662F0\u4E5F\u53EF\u80FD\u662F1\u3002\u4F46\u5076\u6570\u4E0E\u4E00\u4E2Ahash\u503C\u8FDB\u884C\u4E0E\u8FD0\u7B97\u6700\u540E\u4E00\u4F4D\u5FC5\u7136\u4E3A0\uFF0C\u9020\u6210\u6709\u4E9B\u4F4D\u7F6E\u6C38\u8FDC\u6620\u5C04\u4E0D\u4E0A\u503C</strong>\u3002(\u60F3\u5C3D\u529E\u6CD5\u7684\u6270\u52A8)</p><p>\u4F46\u662F\uFF0C\u5373\u4F7F\u6563\u5217\u51FD\u6570\u5F88\u677E\u6563\uFF0C\u4F46\u662F\u6700\u540E\u7ED3\u679C\u6211\u4EEC\u53EA\u53D6\u540E\u9762\u51E0\u4F4D\uFF0C\u78B0\u649E\u4F9D\u65E7\u662F\u5F88\u4E25\u91CD\u7684\u3002\u8FD9\u4E2A\u65F6\u5019\u6211\u4EEC\u7684hash\u51FD\u6570\u7684\u4EF7\u503C\u4F53\u73B0\u51FA\u6765\u4E86\u3002</p><p>\u6211\u4EEC\u5C06hashCode\u4E0E\u81EA\u5DF1\u53F3\u79FB16\u4F4D\u7684\u7ED3\u679C(\u521A\u597D32bit\u7684\u4E00\u534A)\u8FDB\u884C\u5F02\u6216\u64CD\u4F5C\u3002\u5C31\u662F\u4E3A\u4E86\u6DF7\u5408\u54C8\u5E0C\u503C\u7684\u9AD8\u4F4D\u548C\u4F4E\u4F4D\uFF0C\u589E\u52A0\u4F4E\u4F4D\u7684\u968F\u673A\u6027\uFF0C\u5E76\u4E14\u6DF7\u5408\u540E\u7684\u503C\u4E5F\u53D8\u76F8\u4FDD\u6301\u4E86\u9AD8\u4F4D\u7684\u7279\u5F81\u3002</p></blockquote></li></ul><blockquote><p>\u5BF9\u6BD4 jdk1.7 \u7684hash\u65B9\u6CD5</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// This function ensures that hashCodes that differ only by</span>
     <span class="token comment">// constant multiples at each bit position have a bounded</span>
     <span class="token comment">// number of collisions (approximately 8 at default load factor).</span>
 \u200B
     h <span class="token operator">^=</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> h <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>1.7\u7684hash\u7B97\u6CD5\u6270\u52A8\u4E864\u6B21\uFF0C\u6240\u4EE5\u76F8\u6BD4\u4E8E1.8\u7684\u7B97\u6CD5\u662F\u6BD4\u8F83\u6162\u7684\u3002</p><h2 id="get\u65B9\u6CD5-\u67E5\u627E" tabindex="-1"><a class="header-anchor" href="#get\u65B9\u6CD5-\u67E5\u627E" aria-hidden="true">#</a> get\u65B9\u6CD5 (\u67E5\u627E)</h2><blockquote><p>\u67E5\u627E\u7684\u5165\u53E3\u65B9\u6CD5\u5728get, \u4E3B\u8981\u903B\u8F91\u5728getNode\u65B9\u6CD5</p></blockquote><p>\u67E5\u627E\u64CD\u4F5C\uFF0C\u5148\u5B9A\u4F4D\u952E\u503C\u5BF9\u6240\u5728\u7684\u6876\u4F4D\u7F6E\uFF0C\u7136\u540E\u518D\u5BF9\u94FE\u8868\u6216\u8005\u7EA2\u9ED1\u6811\u8FDB\u884C\u67E5\u627E\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 \u200B
 \u200B
 <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
     <span class="token comment">// 1. \u5B9A\u4F4D\u952E\u503C\u5BF9\u6240\u5728\u6876\u7684\u4F4D\u7F6E</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
         <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token comment">// always check first node</span>
             <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             <span class="token keyword">return</span> first<span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token comment">// 2. \u5982\u679Cfirst\u662FTreeNode\u7C7B\u578B\uFF0C\u5219\u4F7F\u7528\u7EA2\u9ED1\u6811\u67E5\u627E\u65B9\u6CD5</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                 <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token comment">// 2. \u5426\u5219\u5BF9\u94FE\u8868\u8FDB\u884C\u67E5\u627E</span>
             <span class="token keyword">do</span> <span class="token punctuation">{</span>
                 <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                     <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                     <span class="token keyword">return</span> e<span class="token punctuation">;</span>
             <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>\u67E5\u627E\u6838\u5FC3\u5728\u4E8EgetNode()\u65B9\u6CD5\u3002\u91CC\u9762\u5DF2\u7ECF\u505A\u4E86\u6CE8\u91CA\u3002</p><p>\u6211\u4EEC\u5148\u770B\u5230\u7B2C\u4E00\u6B65\u201C\u5B9A\u4F4D\u952E\u503C\u5BF9\u6240\u5728\u6876\u7684\u4F4D\u7F6E\u201D\uFF0C\u5B9E\u73B0\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u8FD9\u91CC\u901A\u8FC7<code>(n-1)&amp;hash</code>\u53EF\u4EE5\u7B97\u51FA\u6876\u5728\u6876\u6570\u7EC4\u4E2D\u7684\u4F4D\u7F6E\u3002\u89E3\u91CA\u4E00\u4E0B\uFF0CHashMap\u4E2D\u6876\u6570\u7EC4\u7684\u5927\u5C0F length \u603B\u662F 2 \u7684\u5E42\u3002\u6B64\u65F6\uFF0C<code>(n-1)&amp;hash</code>\u7B49\u4EF7\u4E8E\u5BF9length\u53D6\u4F59\u3002\u4F46\u53D6\u4F59\u6548\u7387\u6CA1\u6709\u4F4D\u8FD0\u7B97\u9AD8\uFF0C\u6240\u4EE5<code>(n-1)&amp;hash</code>\u4E5F\u662F\u4E00\u4E2A\u5C0F\u7684\u4F18\u5316\u3002</p><p>\u5047\u8BBE hash=143\uFF0Cn=16\u3002\u8BA1\u7B97\u8FC7\u7A0B\u5982\u4E0B\uFF1A</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c96fc03ec4540a2995f9308ec7d19c1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>\u6700\u7EC8\u7ED3\u679C\u4E3A15\uFF0C\u521A\u597D\u5C31\u662F143%16\u7684\u7ED3\u679C\u3002</p><h2 id="put\u65B9\u6CD5-\u63D2\u5165" tabindex="-1"><a class="header-anchor" href="#put\u65B9\u6CD5-\u63D2\u5165" aria-hidden="true">#</a> put\u65B9\u6CD5 (\u63D2\u5165)</h2><blockquote><p>\u5BF9\u4E8E\u63D2\u5165\u64CD\u4F5C\u6211\u4EEC\u5148\u5206\u6790\u5927\u4F53\u6D41\u7A0B\uFF1A</p><p>\u9996\u5148\u80AF\u5B9A\u662F\u5148\u5B9A\u4F4D\u8981\u63D2\u5165\u7684\u952E\u503C\u5BF9\u5C5E\u4E8E\u54EA\u4E2A\u6876\uFF0C\u5B9A\u4F4D\u5230\u6876\u540E\uFF0C\u518D\u5224\u65AD\u6876\u662F\u5426\u4E3A\u7A7A\u3002\u5982\u679C\u4E3A\u7A7A\uFF0C\u5219\u5C06\u952E\u503C\u5BF9\u5B58\u5165\u5373\u53EF\u3002\u5982\u679C\u4E0D\u4E3A\u7A7A\uFF0C\u5219\u9700\u5C06\u952E\u503C\u5BF9\u63A5\u5728\u94FE\u8868\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E\uFF0C\u6216\u8005\u66F4\u65B0\u952E\u503C\u5BF9\u3002</p><p>\u5F53\u7136\u63D2\u5165\u8FC7\u7A0B\u8FD8\u6709\u5F88\u591A\u7EC6\u8282\u3002\u9996\u5148HashMap\u662F\u53D8\u957F\u96C6\u5408\uFF0C\u9700\u8981\u8003\u8651\u6269\u5BB9\u95EE\u9898\u3002\u5176\u6B21\uFF0C\u5728JDK1.8\u4E2D\uFF0CHashMap\u5F15\u5165\u4E86\u7EA2\u9ED1\u6811\u4F18\u5316\u8FC7\u957F\u94FE\u8868\uFF0C\u6240\u4EE5\u8FD9\u91CC\u8981\u8003\u8651\u4F18\u5316\u8FC7\u7A0B\u3002</p><p>\u63D2\u5165\u64CD\u4F5C\u7684\u5165\u53E3\u5728<code>put(K,V)</code>\uFF0C\u6838\u5FC3\u5728<code>V putVal(int, K, V, boolean, boolean)</code>\u65B9\u6CD5\u4E2D\u3002</p></blockquote><p>\u9996\u5148\u6211\u4EEC\u770B\u4E0B\u63D2\u5165\u64CD\u4F5C\u7684\u6E90\u7801\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 \u200B
 <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>
                <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
     <span class="token comment">// \u521D\u59CB\u5316\u6876\u6570\u7EC4 table\uFF0Ctable \u88AB\u5EF6\u8FDF\u5230\u63D2\u5165\u65B0\u6570\u636E\u65F6\u518D\u8FDB\u884C\u521D\u59CB\u5316</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
         n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
     <span class="token comment">// \u5982\u679C\u6876\u4E2D\u4E0D\u5305\u542B\u952E\u503C\u5BF9\u8282\u70B9\u5F15\u7528\uFF0C\u5219\u5C06\u65B0\u952E\u503C\u5BF9\u8282\u70B9\u7684\u5F15\u7528\u5B58\u5165\u6876\u4E2D\u5373\u53EF</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
         tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">else</span> <span class="token punctuation">{</span>
         <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
         <span class="token comment">// \u5982\u679C\u952E\u7684\u503C\u4EE5\u53CA\u8282\u70B9 hash \u7B49\u4E8E\u94FE\u8868\u4E2D\u7684\u7B2C\u4E00\u4E2A\u952E\u503C\u5BF9\u8282\u70B9\u65F6\uFF0C\u5219\u5C06 e \u6307\u5411\u8BE5\u952E\u503C\u5BF9</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
             <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             e <span class="token operator">=</span> p<span class="token punctuation">;</span>
             
         <span class="token comment">// \u5982\u679C\u6876\u4E2D\u7684\u5F15\u7528\u7C7B\u578B\u4E3A TreeNode\uFF0C\u5219\u8C03\u7528\u7EA2\u9ED1\u6811\u7684\u63D2\u5165\u65B9\u6CD5</span>
         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>  
             e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">else</span> <span class="token punctuation">{</span>
             <span class="token comment">// \u5BF9\u94FE\u8868\u8FDB\u884C\u904D\u5386\uFF0C\u5E76\u7EDF\u8BA1\u94FE\u8868\u957F\u5EA6</span>
             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 <span class="token comment">// \u94FE\u8868\u4E2D\u4E0D\u5305\u542B\u8981\u63D2\u5165\u7684\u952E\u503C\u5BF9\u8282\u70B9\u65F6\uFF0C\u5219\u5C06\u8BE5\u8282\u70B9\u63A5\u5728\u94FE\u8868\u7684\u6700\u540E</span>
                 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                     p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token comment">// \u5982\u679C\u94FE\u8868\u957F\u5EA6\u5927\u4E8E\u6216\u7B49\u4E8E\u6811\u5316\u9608\u503C\uFF0C\u5219\u8FDB\u884C\u6811\u5316\u64CD\u4F5C</span>
                     <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>
                         <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token keyword">break</span><span class="token punctuation">;</span>
                 <span class="token punctuation">}</span>
                 
                 <span class="token comment">// \u6761\u4EF6\u4E3A true\uFF0C\u8868\u793A\u5F53\u524D\u94FE\u8868\u5305\u542B\u8981\u63D2\u5165\u7684\u952E\u503C\u5BF9\uFF0C\u7EC8\u6B62\u904D\u5386</span>
                 <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                     <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                     <span class="token keyword">break</span><span class="token punctuation">;</span>
                 p <span class="token operator">=</span> e<span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
         
         <span class="token comment">// \u5224\u65AD\u8981\u63D2\u5165\u7684\u952E\u503C\u5BF9\u662F\u5426\u5B58\u5728 HashMap \u4E2D</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// existing mapping for key</span>
             <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
             <span class="token comment">// onlyIfAbsent \u8868\u793A\u662F\u5426\u4EC5\u5728 oldValue \u4E3A null \u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u952E\u503C\u5BF9\u7684\u503C</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                 e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
             <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
     <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
     <span class="token comment">// \u952E\u503C\u5BF9\u6570\u91CF\u8D85\u8FC7\u9608\u503C\u65F6\uFF0C\u5219\u8FDB\u884C\u6269\u5BB9</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span>
         <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><blockquote><p>putVal\u7684\u4E3B\u8981\u903B\u8F91\uFF1A</p></blockquote><ol><li>\u5F53\u6876\u6570\u7EC4 table \u4E3A\u7A7A\u65F6\uFF0C\u901A\u8FC7<code>resize</code>(<strong>\u6269\u5BB9</strong>)\u7684\u65B9\u5F0F\u521D\u59CB\u5316 table</li></ol><ol start="2"><li>\u5982\u679C\u5B9A\u4F4D\u5230\u7684\u6570\u7EC4\u4F4D\u7F6E\u6709\u5143\u7D20\uFF0C\u5B58\u5728\u7684\u8BDD\u5982\u679C key \u76F8\u540C\u5C31\u76F4\u63A5\u8986\u76D6\uFF0C\u5982\u679C key \u4E0D\u76F8\u540C\uFF0C\u5C31\u5224\u65AD p \u662F\u5426\u662F\u4E00\u4E2A\u6811\u8282\u70B9\uFF0C\u5982\u679C\u662F\u5C31\u8C03\u7528<code>putTreeVal</code>\u5C06\u5143\u7D20\u6DFB\u52A0\u8FDB\u5165\u3002\u5982\u679C\u4E0D\u662F\u5C31\u904D\u5386\u94FE\u8868\u63D2\u5165(\u63D2\u5165\u7684\u662F\u94FE\u8868\u5C3E\u90E8)\u3002</li></ol><ol start="3"><li>\u5982\u679C\u5B9A\u4F4D\u5230\u7684\u6570\u7EC4\u4F4D\u7F6E\u6CA1\u6709\u5143\u7D20\uFF0C\u5219\u5C06\u952E\u503C\u5BF9\u94FE\u5165\u94FE\u8868\u4E2D\uFF0C\u5E76\u6839\u636E\u94FE\u8868\u957F\u5EA6\u51B3\u5B9A\u662F\u5426\u5C06\u94FE\u8868\u8F6C\u4E3A\u7EA2\u9ED1\u6811\uFF08<code>treeifyBin</code> <strong>\u6811\u5316\u64CD\u4F5C</strong>\uFF09</li></ol><ol start="4"><li>\u5224\u65AD\u952E\u503C\u5BF9\u6570\u91CF\u662F\u5426\u5927\u4E8E\u9608\u503C\uFF0C\u5927\u4E8E\u7684\u8BDD\u5219\u8FDB\u884C<strong>\u6269\u5BB9\u64CD\u4F5C</strong><code>resize</code></li></ol><blockquote><p>\u53EF\u4EE5\u770B\u51FA\u6765resize(\u6269\u5BB9)\u5728\u63D2\u5165\u64CD\u4F5C\u7684\u903B\u8F91\u4E2D\u975E\u5E38\u91CD\u8981\uFF0C\u63A5\u4E0B\u6765\u6211\u4EEC\u5C31\u8BB2HashMap\u7684<strong>\u6269\u5BB9\u673A\u5236</strong>\u3002</p></blockquote><h2 id="\u6269\u5BB9\u673A\u5236" tabindex="-1"><a class="header-anchor" href="#\u6269\u5BB9\u673A\u5236" aria-hidden="true">#</a> \u6269\u5BB9\u673A\u5236</h2><h3 id="resize\u65B9\u6CD5-\u6269\u5BB9\u4E3B\u8981\u903B\u8F91" tabindex="-1"><a class="header-anchor" href="#resize\u65B9\u6CD5-\u6269\u5BB9\u4E3B\u8981\u903B\u8F91" aria-hidden="true">#</a> resize\u65B9\u6CD5 (\u6269\u5BB9\u4E3B\u8981\u903B\u8F91)</h3><blockquote><p>\u80CC\u666F\u77E5\u8BC6\uFF1A\u5728 HashMap \u4E2D\uFF0C\u6876\u6570\u7EC4\u7684\u957F\u5EA6\u5747\u662F2\u7684\u5E42\uFF0C\u9608\u503C\u5927\u5C0F\u4E3A\u6876\u6570\u7EC4\u957F\u5EA6\u4E0E\u8D1F\u8F7D\u56E0\u5B50\u7684\u4E58\u79EF\u3002\u5F53 HashMap \u4E2D\u7684\u952E\u503C\u5BF9\u6570\u91CF\u8D85\u8FC7\u9608\u503C\u65F6\uFF0C\u8FDB\u884C\u6269\u5BB9\u3002</p><p>\u9700\u8981\u6CE8\u610F\uFF1A\u8FDB\u884C\u6269\u5BB9\uFF0C\u4F1A\u4F34\u968F\u7740\u4E00\u6B21\u91CD\u65B0 hash \u5206\u914D\uFF0C\u5E76\u4E14\u4F1A\u904D\u5386 hash \u8868\u4E2D\u6240\u6709\u7684\u5143\u7D20\uFF0C\u662F\u975E\u5E38\u8017\u65F6\u7684\u3002\u5728\u7F16\u5199\u7A0B\u5E8F\u4E2D\uFF0C\u8981\u5C3D\u91CF\u907F\u514D resize\u3002</p></blockquote><p>HashMap\u6309\u7167\u5F53\u524D\u6876\u6570\u7EC4\u957F\u5EA6\u76842\u500D\u8FDB\u884C\u6269\u5BB9\uFF0C\u6269\u5BB9\u4E4B\u540E\uFF0C\u8981\u91CD\u65B0\u8BA1\u7B97\u952E\u503C\u5BF9\u7684\u4F4D\u7F6E\uFF0C\u5E76\u628A\u5B83\u4EEC\u79FB\u52A8\u5230\u5408\u9002\u7684\u4F4D\u7F6E\u4E0A\u53BB\u3002</p><p>\u5177\u4F53\u5B9E\u73B0\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>
     <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
     <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>
     <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token comment">// \u5982\u679C table \u4E0D\u4E3A\u7A7A\uFF0C\u8868\u660E\u5DF2\u7ECF\u521D\u59CB\u5316\u8FC7\u4E86</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// \u5F53 table \u5BB9\u91CF\u8D85\u8FC7\u5BB9\u91CF\u6700\u5927\u503C\uFF0C\u5219\u4E0D\u518D\u6269\u5BB9</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
             <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>
         <span class="token punctuation">}</span> 
         <span class="token comment">// \u6309\u65E7\u5BB9\u91CF\u548C\u9608\u503C\u76842\u500D\u8BA1\u7B97\u65B0\u5BB9\u91CF\u548C\u9608\u503C\u7684\u5927\u5C0F</span>
         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span>
                  oldCap <span class="token operator">&gt;=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span>
             newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// double threshold</span>
     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// initial capacity was placed in threshold</span>
         <span class="token comment">/*
          * \u521D\u59CB\u5316\u65F6\uFF0C\u5C06 threshold \u7684\u503C\u8D4B\u503C\u7ED9 newCap\uFF0C
          * HashMap \u4F7F\u7528 threshold \u53D8\u91CF\u6682\u65F6\u4FDD\u5B58 initialCapacity \u53C2\u6570\u7684\u503C
          */</span> 
         newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>
     <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment">// zero initial threshold signifies using defaults</span>
         <span class="token comment">/*
          * \u8C03\u7528\u65E0\u53C2\u6784\u9020\u65B9\u6CD5\u65F6\uFF0C\u6876\u6570\u7EC4\u5BB9\u91CF\u4E3A\u9ED8\u8BA4\u5BB9\u91CF\uFF0C
          * \u9608\u503C\u4E3A\u9ED8\u8BA4\u5BB9\u91CF\u4E0E\u9ED8\u8BA4\u8D1F\u8F7D\u56E0\u5B50\u4E58\u79EF
          */</span>
         newCap <span class="token operator">=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">;</span>
         newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">*</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     
     <span class="token comment">// newThr \u4E3A 0 \u65F6\uFF0C\u6309\u9608\u503C\u8BA1\u7B97\u516C\u5F0F\u8FDB\u884C\u8BA1\u7B97</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>
         newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">?</span>
                   <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>
     <span class="token comment">// \u521B\u5EFA\u65B0\u7684\u6876\u6570\u7EC4\uFF0C\u6876\u6570\u7EC4\u7684\u521D\u59CB\u5316\u4E5F\u662F\u5728\u8FD9\u91CC\u5B8C\u6210\u7684</span>
     <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>
     table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// \u5982\u679C\u65E7\u7684\u6876\u6570\u7EC4\u4E0D\u4E3A\u7A7A\uFF0C\u5219\u904D\u5386\u6876\u6570\u7EC4\uFF0C\u5E76\u5C06\u952E\u503C\u5BF9\u6620\u5C04\u5230\u65B0\u7684\u6876\u6570\u7EC4\u4E2D</span>
         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                 <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                     newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
                 <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                     <span class="token comment">// \u91CD\u65B0\u6620\u5C04\u65F6\uFF0C\u9700\u8981\u5BF9\u7EA2\u9ED1\u6811\u8FDB\u884C\u62C6\u5206</span>
                     <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// preserve order</span>
                     <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                     <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                     <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
                     <span class="token comment">// \u904D\u5386\u94FE\u8868\uFF0C\u5E76\u5C06\u94FE\u8868\u8282\u70B9\u6309\u539F\u987A\u5E8F\u8FDB\u884C\u5206\u7EC4</span>
                     <span class="token keyword">do</span> <span class="token punctuation">{</span>
                         next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                             <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                 loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
                             <span class="token keyword">else</span>
                                 loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
                             loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
                         <span class="token punctuation">}</span>
                         <span class="token keyword">else</span> <span class="token punctuation">{</span>
                             <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                 hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
                             <span class="token keyword">else</span>
                                 hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
                             hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
                         <span class="token punctuation">}</span>
                     <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token comment">// \u5C06\u5206\u7EC4\u540E\u7684\u94FE\u8868\u6620\u5C04\u5230\u65B0\u6876\u4E2D</span>
                     <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                         loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                         newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>
                     <span class="token punctuation">}</span>
                     <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                         hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                         newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>
                     <span class="token punctuation">}</span>
                 <span class="token punctuation">}</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> newTab<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br></div></div><p>resize\u65B9\u6CD5\u7684\u4E3B\u8981\u903B\u8F91\uFF1A</p><ol><li><p>\u8BA1\u7B97\u65B0\u6876\u6570\u7EC4\u7684\u5BB9\u91CF newCap \u548C\u65B0\u9608\u503C newThr</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token comment">// \u7B2C\u4E00\u4E2A\u6761\u4EF6\u5206\u652F</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span> oldCap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// \u5D4C\u5957\u6761\u4EF6\u5206\u652F</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
     <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span>
                  oldCap <span class="token operator">&gt;=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
 <span class="token punctuation">}</span> 
 <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
 <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
 \u200B
 <span class="token comment">// \u7B2C\u4E8C\u4E2A\u6761\u4EF6\u5206\u652F</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p>\u5206\u652F\u4E00\uFF1A</p></blockquote><ul><li>oldCap&gt;0\uFF1A\u6876\u6570\u7EC4table\u5DF2\u7ECF\u88AB\u521D\u59CB\u5316\uFF0C\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u4F1A\u5C06 oldThr \u8D4B\u503C\u7ED9 newCap\uFF0C\u7B49\u4EF7\u4E8E<code>newCap = threshold = tableSizeFor(initialCapacity)</code>\u3002\u6211\u4EEC\u5728\u521D\u59CB\u5316\u65F6\u4F20\u5165\u7684 initialCapacity \u53C2\u6570\u7ECF\u8FC7 threshold \u4E2D\u8F6C\u6700\u7EC8\u8D4B\u503C\u7ED9\u4E86 newCap\u3002</li><li>oldThr&gt;0\uFF1Athreshold&gt;0, \u4E14\u6876\u6570\u7EC4\u672A\u88AB\u521D\u59CB\u5316\uFF0C\u8C03\u7528 HashMap(int) \u548C HashMap(int, float) \u6784\u9020\u65B9\u6CD5\u65F6\u4F1A\u4EA7\u751F\u8FD9\u79CD\u60C5\u51B5\uFF0C\u6B64\u79CD\u60C5\u51B5\u4E0B newCap = oldThr\uFF0CnewThr \u5728\u7B2C\u4E8C\u4E2A\u6761\u4EF6\u5206\u652F\u4E2D\u7B97\u51FA</li><li>oldCap == 0 &amp;&amp; oldThr == 0\uFF1A\u6876\u6570\u7EC4\u672A\u88AB\u521D\u59CB\u5316\uFF0C\u4E14 threshold \u4E3A 0\uFF0C\u8C03\u7528 HashMap() \u6784\u9020\u65B9\u6CD5\u4F1A\u4EA7\u751F\u8FD9\u79CD\u60C5\u51B5\u3002</li></ul><blockquote><p>\u5D4C\u5957\u5206\u652F\uFF1A</p></blockquote><ul><li>oldCap &gt;= MAXIMUM_CAPACITY\uFF1A\u6876\u6570\u7EC4\u5BB9\u91CF\u5927\u4E8E\u6216\u7B49\u4E8E\u6700\u5927\u6876\u5BB9\u91CF 2^30\uFF0C\u8FD9\u4E2A\u65F6\u5019\u4E0D\u518D\u6269\u5BB9</li><li>newCap &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt; DEFAULT_INITIAL_CAPACITY\uFF1A\u65B0\u6876\u6570\u7EC4\u5BB9\u91CF\u5C0F\u4E8E\u6700\u5927\u503C\uFF0C\u4E14\u65E7\u6876\u6570\u7EC4\u5BB9\u91CF\u5927\u4E8E 16</li></ul><blockquote><p>\u5206\u652F\u4E8C\uFF1A</p></blockquote><ul><li>newThr == 0\uFF1A\u7B2C\u4E00\u4E2A\u6761\u4EF6\u5206\u652F\u672A\u8BA1\u7B97 newThr \u6216\u5D4C\u5957\u5206\u652F\u5728\u8BA1\u7B97\u8FC7\u7A0B\u4E2D\u5BFC\u81F4 newThr \u6EA2\u51FA\u5F52\u96F6</li></ul></li><li><p>\u6839\u636E\u8BA1\u7B97\u51FA\u7684 newCap \u521B\u5EFA\u65B0\u7684\u6876\u6570\u7EC4\uFF0C\u6876\u6570\u7EC4 table \u4E5F\u662F\u5728\u8FD9\u91CC\u8FDB\u884C\u521D\u59CB\u5316\u7684</p></li><li><p>\u5C06\u952E\u503C\u5BF9\u8282\u70B9\u91CD\u65B0\u6620\u5C04\u5230\u65B0\u7684\u6876\u6570\u7EC4\u91CC\u3002\u5982\u679C\u8282\u70B9\u662F TreeNode \u7C7B\u578B\uFF0C\u5219\u9700\u8981\u62C6\u5206\u7EA2\u9ED1\u6811\u3002\u5982\u679C\u662F\u666E\u901A\u8282\u70B9\uFF0C\u5219\u8282\u70B9\u6309\u539F\u987A\u5E8F\u8FDB\u884C\u5206\u7EC4\u3002\u8BE5\u79CD\u60C5\u51B5\u4E0B\u65B0\u9608\u503C newThr = oldThr &lt;&lt; 1\uFF0C\u79FB\u4F4D\u53EF\u80FD\u4F1A\u5BFC\u81F4\u6EA2\u51FA\u3002</p><blockquote><p>\u90A3\u4E48\u5982\u4F55\u94FE\u8868\u662F\u91CD\u65B0\u6620\u5C04\u5462\uFF1F</p></blockquote><p>\u5F80\u5E95\u5C42\u6570\u636E\u7ED3\u6784\u4E2D\u63D2\u5165\u8282\u70B9\u65F6\uFF0C\u5148\u901A\u8FC7\u6A21\u8FD0\u7B97\u8BA1\u7B97\u6876\u4F4D\u7F6E\uFF0C\u63A5\u7740\u628A\u8282\u70B9\u653E\u5165\u6876\u4E2D\u5373\u53EF\u3002\u6211\u4EEC\u53EF\u4EE5\u5C06\u91CD\u65B0\u6620\u5C04\u770B\u4F5C\u662F\u63D2\u5165\u64CD\u4F5C\uFF0CJDK1.7\u786E\u5B9E\u5C31\u662F\u8FD9\u6837\u505A\u7684\u3002</p><p>\u4F46\u5728JDK1.8\u4E2D\u5BF9\u8FC7\u7A0B\u8FDB\u884C\u4E86\u4E00\u5B9A\u4F18\u5316\uFF0C\u91CD\u65B0\u6620\u5C04\u8282\u70B9\u9700\u8981\u8003\u8651\u8282\u70B9\u7C7B\u578B\u3002\u5BF9\u4E8E\u6811\u5F62\u8282\u70B9\uFF0C\u9700\u5148\u62C6\u5206\u7EA2\u9ED1\u6811\u518D\u6620\u5C04\u3002\u5BF9\u4E8E\u94FE\u8868\u7C7B\u578B\u8282\u70B9\uFF0C\u5219\u9700\u5148\u5BF9\u94FE\u8868\u8FDB\u884C\u5206\u7EC4\uFF0C\u7136\u540E\u518D\u6620\u5C04\u3002\u9700\u8981\u7684\u6CE8\u610F\u7684\u662F\uFF0C\u5206\u7EC4\u540E\uFF0C\u7EC4\u5185\u8282\u70B9\u76F8\u5BF9\u4F4D\u7F6E\u4FDD\u6301\u4E0D\u53D8\u3002</p><p>\u770B\u4E2A\u4F8B\u5B50\uFF1A</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9592e5a521c8413c81b83cf2755d6d7c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>\u5982\u679C\u6211\u4EEC\u5BF9\u4E0A\u56FE\u6876\u6570\u7EC4\u8FDB\u884C\u6269\u5BB9\uFF0C\u6269\u5BB9\u540E\u5BB9\u91CF n =16\uFF0C\u91CD\u65B0\u6620\u5C04\u8FC7\u7A0B\u5982\u4E0B\uFF1A</p><p>\u4F9D\u6B21\u904D\u5386\u94FE\u8868\uFF0C\u5E76\u8BA1\u7B97\u8282\u70B9 <code>hash &amp; oldCap</code> \u7684\u503C\u3002</p><p>35&amp;8=0; 27&amp;8!=0; 19&amp;8=0; 43&amp;8!=0;</p><p>\u5982\u679C\u503C\u4E3A0\uFF0C\u5C06 loHead \u548C loTail \u6307\u5411\u8FD9\u4E2A\u8282\u70B9\u3002\u5982\u679C\u540E\u9762\u8FD8\u6709\u8282\u70B9 hash &amp; oldCap \u4E3A0\u7684\u8BDD\uFF0C\u5219\u5C06\u8282\u70B9\u94FE\u5165 loHead \u6307\u5411\u7684\u94FE\u8868\u4E2D\uFF0C\u5E76\u5C06 loTail \u6307\u5411\u8BE5\u8282\u70B9\u3002\u5982\u679C\u503C\u4E3A\u975E0\u7684\u8BDD\uFF0C\u5219\u8BA9 hiHead \u548C hiTail \u6307\u5411\u8BE5\u8282\u70B9\u3002\u5B8C\u6210\u904D\u5386\u540E\uFF0C\u53EF\u80FD\u4F1A\u5F97\u5230\u4E24\u6761\u94FE\u8868\uFF0C\u6B64\u65F6\u5C31\u5B8C\u6210\u4E86\u94FE\u8868\u5206\u7EC4\uFF1A</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0056fec448646b5a974a27e01d13391~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>\u6700\u540E\u5C06\u8FD9\u4E24\u6761\u8FDE\u76F4\u63A5\u5B58\u653E\u5230\u5BF9\u5E94\u7684\u6876\u4E2D\uFF0C\u5B8C\u6210\u6269\u5BB9\u3002</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/975e60d76af949739fa7ed4072cd58fc~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>JDK1.8\u7684HashMap\u6269\u5BB9\u6548\u7387\u662F\u8981\u9AD8\u4E8E\u4E4B\u524D\u7248\u672C\u7684\u3002JDK1.7\u4E3A\u4E86\u9632\u6B62\u56E0hash\u78B0\u649E\u5F15\u53D1\u7684\u62D2\u7EDD\u670D\u52A1\u653B\u51FB\uFF0C\u5728\u8BA1\u7B97hash\u8FC7\u7A0B\u4E2D\u5F15\u5165\u968F\u673A\u79CD\u5B50\uFF0C\u4E3A\u4E86\u589E\u5F3Ahash\u7684\u968F\u673A\u6027\uFF0C\u4F7F\u5F97\u952E\u503C\u5BF9\u5747\u5300\u5206\u5E03\u5728\u6876\u6570\u7EC4\u4E2D\u3002\u5728\u6269\u5BB9\u8FC7\u7A0B\u4E2D\uFF0C\u76F8\u5173\u65B9\u6CD5\u4F1A\u6839\u636E\u5BB9\u91CF\u5224\u65AD\u662F\u5426\u9700\u8981\u751F\u6210\u65B0\u7684\u968F\u673A\u79CD\u5B50\uFF0C\u5E76\u91CD\u65B0\u8BA1\u7B97\u6240\u6709\u8282\u70B9\u7684hash\u3002\u800C\u5728JDK1.8\u4E2D\u5219\u901A\u8FC7\u5F15\u5165\u7EA2\u9ED1\u6811\u66FF\u4EE3\u4E86\u8BE5\u65B9\u5F0F\u3002\u4ECE\u800C\u907F\u514D\u4E86\u591A\u6B21\u8BA1\u7B97hash\u7684\u64CD\u4F5C\uFF0C\u63D0\u9AD8\u4E86\u6269\u5BB9\u6548\u7387\u3002</p></li></ol><blockquote><p>\u4EE5\u4E0A\u6211\u4EEC\u5C31\u8BB2\u5B8C\u4E86\u6269\u5BB9\u7684\u4E3B\u4F53\u903B\u8F91\u3002\u6269\u5BB9\u540E\uFF0C\u7EA2\u9ED1\u6811\u8282\u70B9\u548C\u666E\u901A\u8282\u70B9\u4E00\u6837\u662F\u9700\u8981\u91CD\u65B0\u6620\u5C04\u7684\u3002\u4E8E\u662F\u6211\u4EEC\u63A5\u7740\u5C31\u8BF4\u7EA2\u9ED1\u6811\u7684\u5206\u7EC4\u548C\u91CD\u65B0\u6620\u5C04\u3002(split\u65B9\u6CD5\u7684\u8C03\u7528\u53EF\u4EE5\u5728resize\u65B9\u6CD5\u4F53\u4E2D\u627E\u5230\u3002)</p></blockquote><h3 id="split\u65B9\u6CD5-\u7EA2\u9ED1\u6811\u62C6\u5206" tabindex="-1"><a class="header-anchor" href="#split\u65B9\u6CD5-\u7EA2\u9ED1\u6811\u62C6\u5206" aria-hidden="true">#</a> split\u65B9\u6CD5 (\u7EA2\u9ED1\u6811\u62C6\u5206)</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token comment">// \u7EA2\u9ED1\u6811\u8F6C\u94FE\u8868\u9608\u503C</span>
 <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">UNTREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
 \u200B
 <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> bit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
     <span class="token comment">// Relink into lo and hi lists, preserving order</span>
     <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
     <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
     <span class="token keyword">int</span> lc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token comment">/* 
      * \u7EA2\u9ED1\u6811\u8282\u70B9\u4ECD\u7136\u4FDD\u7559\u4E86 next \u5F15\u7528\uFF0C\u6545\u4ECD\u53EF\u4EE5\u6309\u94FE\u8868\u65B9\u5F0F\u904D\u5386\u7EA2\u9ED1\u6811\u3002
      * \u4E0B\u9762\u7684\u5FAA\u73AF\u662F\u5BF9\u7EA2\u9ED1\u6811\u8282\u70B9\u8FDB\u884C\u5206\u7EC4\uFF0C\u4E0E\u4E0A\u9762\u7C7B\u4F3C
      */</span>
     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> b<span class="token punctuation">,</span> next<span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
         e<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> bit<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>prev <span class="token operator">=</span> loTail<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                 loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
             <span class="token keyword">else</span>
                 loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
             loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
             <span class="token operator">++</span>lc<span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         <span class="token keyword">else</span> <span class="token punctuation">{</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>prev <span class="token operator">=</span> hiTail<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                 hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
             <span class="token keyword">else</span>
                 hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
             hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
             <span class="token operator">++</span>hc<span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
 \u200B
     <span class="token keyword">if</span> <span class="token punctuation">(</span>loHead <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// \u5982\u679C loHead \u4E0D\u4E3A\u7A7A\uFF0C\u4E14\u94FE\u8868\u957F\u5EA6\u5C0F\u4E8E\u7B49\u4E8E 6\uFF0C\u5219\u5C06\u7EA2\u9ED1\u6811\u8F6C\u6210\u94FE\u8868</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>lc <span class="token operator">&lt;=</span> <span class="token constant">UNTREEIFY_THRESHOLD</span><span class="token punctuation">)</span>
             tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">.</span><span class="token function">untreeify</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">else</span> <span class="token punctuation">{</span>
             tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>
             <span class="token comment">/* 
              * hiHead == null \u65F6\uFF0C\u8868\u660E\u6269\u5BB9\u540E\uFF0C
              * \u6240\u6709\u8282\u70B9\u4ECD\u5728\u539F\u4F4D\u7F6E\uFF0C\u6811\u7ED3\u6784\u4E0D\u53D8\uFF0C\u65E0\u9700\u91CD\u65B0\u6811\u5316
              */</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>hiHead <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
                 loHead<span class="token punctuation">.</span><span class="token function">treeify</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
     <span class="token comment">// \u4E0E\u4E0A\u9762\u7C7B\u4F3C</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>hiHead <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>hc <span class="token operator">&lt;=</span> <span class="token constant">UNTREEIFY_THRESHOLD</span><span class="token punctuation">)</span>
             tab<span class="token punctuation">[</span>index <span class="token operator">+</span> bit<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">.</span><span class="token function">untreeify</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">else</span> <span class="token punctuation">{</span>
             tab<span class="token punctuation">[</span>index <span class="token operator">+</span> bit<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>loHead <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                 hiHead<span class="token punctuation">.</span><span class="token function">treeify</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><p>\u91CD\u65B0\u6620\u5C04\u7EA2\u9ED1\u6811\u7684\u903B\u8F91\u548C\u91CD\u65B0\u6620\u5C04\u94FE\u8868\u7684\u903B\u8F91\u57FA\u672C\u4E00\u81F4\u3002\u4E0D\u540C\u7684\u5730\u65B9\u5728\u4E8E\uFF0C\u91CD\u65B0\u6620\u5C04\u540E\uFF0C\u4F1A\u5C06\u7EA2\u9ED1\u6811\u62C6\u5206\u6210\u4E24\u6761\u7531 TreeNode \u7EC4\u6210\u7684\u94FE\u8868\u3002\u5982\u679C\u94FE\u8868\u957F\u5EA6\u5C0F\u4E8E UNTREEIFY_THRESHOLD\uFF0C\u5219\u5C06\u94FE\u8868\u8F6C\u6362\u6210\u666E\u901A\u94FE\u8868\u3002\u5426\u5219\u6839\u636E\u6761\u4EF6\u91CD\u65B0\u5C06 TreeNode \u94FE\u8868\u6811\u5316\u3002</p><p>\u4E3E\u4E2A\u4F8B\u5B50\uFF1A</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84f829664ad74378968f609cad0cde2c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>\u6211\u4EEC\u5BF9\u8BE5\u6876\u6570\u7EC4\u8FDB\u884C\u6269\u5BB9,\u6269\u5BB9\u540E\u9700\u8981\u91CD\u65B0\u6620\u5C04\u4E0A\u9762\u7684\u7EA2\u9ED1\u6811\uFF0C\u6620\u5C04\u7ED3\u679C\u5982\u4E0B\uFF1A</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d0cce63b70b4646ac622d4e5020de3d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="treeifybin\u65B9\u6CD5-\u94FE\u8868\u6811\u5316" tabindex="-1"><a class="header-anchor" href="#treeifybin\u65B9\u6CD5-\u94FE\u8868\u6811\u5316" aria-hidden="true">#</a> treeifyBin\u65B9\u6CD5 (\u94FE\u8868\u6811\u5316)</h2><blockquote><p>JDK1.8\u5BF9HashMap\u5B9E\u73B0\u8FDB\u884C\u4E86\u6539\u8FDB\u3002\u6700\u5927\u7684\u6539\u8FDB\u5C31\u662F\u5F15\u5165\u4E86\u7EA2\u9ED1\u6811\u3002</p><p>\u5173\u4E8E\u7EA2\u9ED1\u6811\u53EF\u4EE5\u53C2\u8003\u6211\u7684\u53E6\u4E00\u7BC7\u535A\u5BA2\uFF1A<a href="https://juejin.cn/post/7136831545557385224" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7136831545557385224</a></p></blockquote><p>\u6811\u5316\u76F8\u5173\u7684\u4EE3\u7801:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
 \u200B
 <span class="token doc-comment comment">/**
  * \u5F53\u6876\u6570\u7EC4\u5BB9\u91CF\u5C0F\u4E8E\u8BE5\u503C\u65F6\uFF0C\u4F18\u5148\u8FDB\u884C\u6269\u5BB9\uFF0C\u800C\u4E0D\u662F\u6811\u5316
  */</span>
 <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MIN_TREEIFY_CAPACITY</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
 \u200B
 <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
     <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span>  <span class="token comment">// red-black tree links</span>
     <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> left<span class="token punctuation">;</span>
     <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> right<span class="token punctuation">;</span>
     <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>    <span class="token comment">// needed to unlink next upon deletion</span>
     <span class="token keyword">boolean</span> red<span class="token punctuation">;</span>
     <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> val<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 \u200B
 <span class="token doc-comment comment">/**
  * \u5C06\u666E\u901A\u8282\u70B9\u94FE\u8868\u8F6C\u6362\u6210\u6811\u5F62\u8282\u70B9\u94FE\u8868
  */</span>
 <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">treeifyBin</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">int</span> n<span class="token punctuation">,</span> index<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
     <span class="token comment">// \u6876\u6570\u7EC4\u5BB9\u91CF\u5C0F\u4E8E MIN_TREEIFY_CAPACITY\uFF0C\u4F18\u5148\u8FDB\u884C\u6269\u5BB9\u800C\u4E0D\u662F\u6811\u5316</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MIN_TREEIFY_CAPACITY</span><span class="token punctuation">)</span>
         <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// hd \u4E3A\u5934\u8282\u70B9\uFF08head\uFF09\uFF0Ctl \u4E3A\u5C3E\u8282\u70B9\uFF08tail\uFF09</span>
         <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> tl <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
         <span class="token keyword">do</span> <span class="token punctuation">{</span>
             <span class="token comment">// \u5C06\u666E\u901A\u8282\u70B9\u66FF\u6362\u6210\u6811\u5F62\u8282\u70B9</span>
             <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> <span class="token function">replacementTreeNode</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>tl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                 hd <span class="token operator">=</span> p<span class="token punctuation">;</span>
             <span class="token keyword">else</span> <span class="token punctuation">{</span>
                 p<span class="token punctuation">.</span>prev <span class="token operator">=</span> tl<span class="token punctuation">;</span>
                 tl<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
             tl <span class="token operator">=</span> p<span class="token punctuation">;</span>
         <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u5C06\u666E\u901A\u94FE\u8868\u8F6C\u6210\u7531\u6811\u5F62\u8282\u70B9\u94FE\u8868</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> hd<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
             <span class="token comment">// \u5C06\u6811\u5F62\u94FE\u8868\u8F6C\u6362\u6210\u7EA2\u9ED1\u6811</span>
             hd<span class="token punctuation">.</span><span class="token function">treeify</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 \u200B
 <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">replacementTreeNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> p<span class="token punctuation">.</span>key<span class="token punctuation">,</span> p<span class="token punctuation">.</span>value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><p>\u6269\u5BB9\u7684\u8FC7\u7A0B\u4E2D\uFF0C\u6811\u5316\u9700\u8981\u6EE1\u8DB3\u4E24\u4E2A\u6761\u4EF6:</p><ol><li><p>\u94FE\u8868\u957F\u5EA6\u5927\u4E8E\u7B49\u4E8E TREEIFY_THRESHOLD</p><p>\u94FE\u8868\u957F\u5EA6\u5927\u4E8E\u7B49\u4E8E\u4E86\u6811\u5316\u9608\u503C\uFF0C\u4E5F\u5C31\u662F\u6211\u4EEC\u9762\u8BD5\u5E38\u8003\u76848\uFF0C\u624D\u8FDB\u884C\u6811\u5316\u3002</p></li><li><p>\u6876\u6570\u7EC4\u5BB9\u91CF\u5927\u4E8E\u7B49\u4E8E MIN_TREEIFY_CAPACITY</p><p>\u6876\u6570\u7EC4\u5BB9\u91CF\u6BD4\u8F83\u5C0F\u7684\u65F6\u5019\uFF0C\u5E94\u5F53\u4F18\u5148\u6269\u5BB9\uFF0C\u51CF\u5C11hash\u78B0\u649E\u7684\u6982\u7387\u3002</p></li></ol><blockquote><p>HashMap\u5728\u8BBE\u8BA1\u4E4B\u521D\uFF0C\u6CA1\u6709\u8003\u8651\u5230\u4EE5\u540E\u4F1A\u5F15\u5165\u7EA2\u9ED1\u6811\u8FDB\u884C\u4F18\u5316\u3002\u6240\u4EE5\u5E76\u6CA1\u6709\u50CFTreeMap\u4E00\u6837\uFF0C\u8981\u6C42\u952E\u7C7B\u5B9E\u73B0Comparable\u63A5\u53E3\uFF0C\u6216\u63D0\u4F9B\u5BF9\u5E94\u7684\u6BD4\u8F83\u5668\u3002\u4F46\u7531\u4E8E\u6811\u5316\u7684\u8FC7\u7A0B\u9700\u8981\u6BD4\u8F83\u4E24\u4E2A\u952E\u5BF9\u8C61\u7684\u5927\u5C0F\uFF0C\u5728\u952E\u7C7B\u6CA1\u6709\u5B9E\u73B0Comparable\u63A5\u53E3\u7684\u60C5\u51B5\u4E0B\uFF0C\u8FD9\u6210\u4E86\u4E00\u4E2A\u95EE\u9898\u3002HashMap\u505A\u4E86\u4E09\u6B65\u64CD\u4F5C\u3002\u901A\u8FC7\u4E0B\u9762\u4E09\u6B65\u64CD\u4F5C\u5C31\u80FD\u77E5\u9053\u8C01\u5927\u8C01\u5C0F\uFF0C\u6700\u7EC8\u6784\u9020\u51FA\u7EA2\u9ED1\u6811\u4E86\u3002</p></blockquote><ol><li>\u6BD4\u8F83\u952E\u4E0E\u952E\u4E4B\u95F4hash\u7684\u5927\u5C0F\uFF0C\u5982\u679Chash\u76F8\u540C\uFF0C\u7EE7\u7EED\u5F80\u4E0B\u6BD4\u8F83\u3002</li><li>\u68C0\u6D4B\u952E\u7C7B\u662F\u5426\u5B9E\u73B0\u4E86Comparable\u63A5\u53E3\uFF0C\u5982\u679C\u5B9E\u73B0\u8C03\u7528compareTo\u65B9\u6CD5\u8FDB\u884C\u6BD4\u8F83</li><li>\u5982\u679C\u4ECD\u672A\u6BD4\u8F83\u51FA\u5927\u5C0F\uFF0C\u636E\u9700\u8981\u8FDB\u884C\u4EF2\u88C1\u4E86\uFF0C\u4EF2\u88C1\u65B9\u6CD5\u4E3AtieBreadOrder</li></ol><h2 id="untreeify\u65B9\u6CD5-\u7EA2\u9ED1\u6811\u94FE\u5316" tabindex="-1"><a class="header-anchor" href="#untreeify\u65B9\u6CD5-\u7EA2\u9ED1\u6811\u94FE\u5316" aria-hidden="true">#</a> untreeify\u65B9\u6CD5 (\u7EA2\u9ED1\u6811\u94FE\u5316)</h2><p>\u7EA2\u9ED1\u6811\u4E2D\u4ECD\u7136\u4FDD\u7559\u4E86\u539F\u94FE\u8868\u8282\u70B9\u7684\u987A\u5E8F\u3002\u6709\u4E86\u8FD9\u4E2A\u524D\u63D0\uFF0C\u5C06\u7EA2\u9ED1\u6811\u8F6C\u5316\u6210\u94FE\u8868\uFF0C\u4EC5\u9700\u5C06 TreeNode \u94FE\u8868\u8F6C\u6362\u6210 Node \u7C7B\u578B\u7684\u94FE\u8868\u5373\u53EF\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">untreeify</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> tl <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
     <span class="token comment">// \u904D\u5386 TreeNode \u94FE\u8868\uFF0C\u5E76\u7528 Node \u66FF\u6362</span>
     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> q <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> q <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// \u66FF\u6362\u8282\u70B9\u7C7B\u578B</span>
         <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">replacementNode</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>tl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
             hd <span class="token operator">=</span> p<span class="token punctuation">;</span>
         <span class="token keyword">else</span>
             tl<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
         tl <span class="token operator">=</span> p<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> hd<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 \u200B
 <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">replacementNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> p<span class="token punctuation">.</span>key<span class="token punctuation">,</span> p<span class="token punctuation">.</span>value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="remove\u65B9\u6CD5-\u5220\u9664" tabindex="-1"><a class="header-anchor" href="#remove\u65B9\u6CD5-\u5220\u9664" aria-hidden="true">#</a> remove\u65B9\u6CD5 (\u5220\u9664)</h2><blockquote><p>HashMap \u7684\u5220\u9664\u64CD\u4F5C\u5E76\u4E0D\u590D\u6742\uFF0C\u5165\u53E3\u65B9\u6CD5\u4E3Aremove\uFF0C\u4E3B\u8981\u903B\u8F91\u5728removeNode\u65B9\u6CD5\u3002</p></blockquote><p>\u5220\u9664\u4EC5\u9700\u4E09\u4E2A\u6B65\u9AA4\u5373\u53EF\u5B8C\u6210\u3002\u7B2C\u4E00\u6B65\u662F\u5B9A\u4F4D\u6876\u4F4D\u7F6E\uFF0C\u7B2C\u4E8C\u6B65\u904D\u5386\u94FE\u8868\u5E76\u627E\u5230\u952E\u503C\u76F8\u7B49\u7684\u8282\u70B9\uFF0C\u7B2C\u4E09\u6B65\u5220\u9664\u8282\u70B9\u3002\u76F8\u5173\u6E90\u7801\u5982\u4E0B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span>
         <span class="token keyword">null</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 \u200B
 <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span>
                            <span class="token keyword">boolean</span> matchValue<span class="token punctuation">,</span> <span class="token keyword">boolean</span> movable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> index<span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
         <span class="token comment">// 1. \u5B9A\u4F4D\u6876\u4F4D\u7F6E</span>
         <span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span> <span class="token class-name">V</span> v<span class="token punctuation">;</span>
         <span class="token comment">// \u5982\u679C\u952E\u7684\u503C\u4E0E\u94FE\u8868\u7B2C\u4E00\u4E2A\u8282\u70B9\u76F8\u7B49\uFF0C\u5219\u5C06 node \u6307\u5411\u8BE5\u8282\u70B9</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
             <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             node <span class="token operator">=</span> p<span class="token punctuation">;</span>
         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
             <span class="token comment">// \u5982\u679C\u662F TreeNode \u7C7B\u578B\uFF0C\u8C03\u7528\u7EA2\u9ED1\u6811\u7684\u67E5\u627E\u903B\u8F91\u5B9A\u4F4D\u5F85\u5220\u9664\u8282\u70B9</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                 node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">else</span> <span class="token punctuation">{</span>
                 <span class="token comment">// 2. \u904D\u5386\u94FE\u8868\uFF0C\u627E\u5230\u5F85\u5220\u9664\u8282\u70B9</span>
                 <span class="token keyword">do</span> <span class="token punctuation">{</span>
                     <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                         <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>
                          <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                         node <span class="token operator">=</span> e<span class="token punctuation">;</span>
                         <span class="token keyword">break</span><span class="token punctuation">;</span>
                     <span class="token punctuation">}</span>
                     p <span class="token operator">=</span> e<span class="token punctuation">;</span>
                 <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
         
         <span class="token comment">// 3. \u5220\u9664\u8282\u70B9\uFF0C\u5E76\u4FEE\u590D\u94FE\u8868\u6216\u7EA2\u9ED1\u6811</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchValue <span class="token operator">||</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> value <span class="token operator">||</span>
                              <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                 <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeTreeNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> movable<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> p<span class="token punctuation">)</span>
                 tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
             <span class="token keyword">else</span>
                 p<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
             <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
             <span class="token operator">--</span>size<span class="token punctuation">;</span>
             <span class="token function">afterNodeRemoval</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">return</span> node<span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><h1 id="hashmap-\u7684\u4F7F\u7528" tabindex="-1"><a class="header-anchor" href="#hashmap-\u7684\u4F7F\u7528" aria-hidden="true">#</a> HashMap \u7684\u4F7F\u7528</h1><h2 id="hashmap-\u7684\u51E0\u79CD\u904D\u5386\u65B9\u5F0F" tabindex="-1"><a class="header-anchor" href="#hashmap-\u7684\u51E0\u79CD\u904D\u5386\u65B9\u5F0F" aria-hidden="true">#</a> HashMap \u7684\u51E0\u79CD\u904D\u5386\u65B9\u5F0F</h2><blockquote><p>\u603B\u5171\u7684\u904D\u5386\u65B9\u5F0F\u5728\u67E5\u9605\u540E\u53D1\u73B0\u67097\u79CD\u3002</p><p>\u904D\u5386\u65B9\u5F0F\u4E3B\u8981\u5206\u6210\u4E0B\u9762\u7684\u56DB\u4E2A\u65B9\u5411\uFF1A</p></blockquote><ol><li><p>\u8FED\u4EE3\u5668\uFF08Iterator\uFF09\u65B9\u5F0F\u904D\u5386\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token comment">// \u904D\u5386 EntrySet</span>
 <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 \u200B
 \u200B
 <span class="token comment">// \u904D\u5386 KeySet</span>
 <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">Integer</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li></ol><ol start="2"><li><p>For Each \u65B9\u5F0F\u904D\u5386\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token comment">// \u904D\u5386 EntrySet</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 \u200B
 \u200B
 <span class="token comment">// \u904D\u5386 KeySet</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li></ol><ol start="3"><li><p>Lambda \u8868\u8FBE\u5F0F\u904D\u5386\uFF08JDK 1.8+\uFF09\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token comment">// \u904D\u5386</span>
 map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ol><ol start="4"><li><p>Streams API \u904D\u5386\uFF08JDK 1.8+\uFF09\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token comment">// \u904D\u5386 \u5355\u7EBF\u7A0B</span>
 map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 \u200B
 <span class="token comment">// \u904D\u5386 \u591A\u7EBF\u7A0B</span>
 map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ol><blockquote><p><code>entrySet</code>\u7684\u6027\u80FD\u6BD4<code>keySet</code>\u7684\u6027\u80FD\u9AD8\uFF0C\u6240\u4EE5\u6211\u4EEC\u8FD8\u662F\u5C3D\u91CF\u4F7F\u7528<code>entrySet</code>\u6765\u904D\u5386HashMap\u3002</p></blockquote><h1 id="\u5C0F\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u5C0F\u7ED3" aria-hidden="true">#</a> \u5C0F\u7ED3</h1><p>HashMap\u662FJava\u5B66\u4E60\u8005\u7ED5\u4E0D\u8FC7\u53BB\u7684\u4E00\u9053\u574E\uFF0C\u65E0\u8BBA\u662F\u5E94\u4ED8\u9762\u8BD5\u6216\u8005\u662F\u5B9E\u9645\u7684\u5E94\u7528\u90FD\u8981\u7ECF\u5E38\u548C\u8FD9\u4E2A\u6570\u636E\u7ED3\u6784\u6253\u4EA4\u9053\u3002\u672C\u6587\u53C2\u8003\u4E86\u5F88\u591A\u524D\u4EBA\u7684\u5206\u6790\u5E76\u7531\u81EA\u5DF1\u6D88\u5316\uFF0C\u6700\u7EC8\u5448\u73B0\u51FA\u6765\u3002\u4E0D\u5F97\u4E0D\u8BF4\u5BF9\u6E90\u7801\u7684\u6DF1\u5165\u7406\u89E3\u9700\u8981\u5927\u91CF\u7684\u529F\u592B\uFF0C\u9700\u8981\u878D\u6C47\u8BF8\u591A\u601D\u8003\u3002\u6240\u4EE5\u5728\u6211\u6709\u65B0\u7684\u601D\u8003\u4E4B\u540E\u53EF\u80FD\u4F1A\u5BF9\u6587\u7AE0\u518D\u505A\u66F4\u65B0\uFF0C\u5E0C\u671B\u80FD\u4E3A\u8FD9\u601D\u8003\u518D\u52A0\u4E0A\u4E00\u5C42\u3002</p><p>\u53C2\u8003\u6587\u7AE0\uFF1A</p><ul><li><a href="https://segmentfault.com/a/1190000012926722" target="_blank" rel="noopener noreferrer">https://segmentfault.com/a/1190000012926722</a></li><li><a href="https://www.jianshu.com/p/3d66446a03f7" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/3d66446a03f7</a></li><li><a href="https://www.jianshu.com/p/effb601f2c48" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/effb601f2c48</a></li><li><a href="https://www.jianshu.com/p/2fee1d246cad" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/2fee1d246cad</a></li><li><a href="https://javaguide.cn/java/collection/hashmap-source-code.html#hashmap" target="_blank" rel="noopener noreferrer">https://javaguide.cn/java/collection/hashmap-source-code.html#hashmap</a></li><li><a href="https://mp.weixin.qq.com/s/zQBN3UvJDhRTKP6SzcZFKw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/zQBN3UvJDhRTKP6SzcZFKw</a></li></ul>`,122);function t(e,o){return p}var l=n(a,[["render",t],["__file","index.html.vue"]]);export{l as default};
